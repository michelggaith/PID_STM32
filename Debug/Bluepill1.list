
Bluepill1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a30  08005a30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005a30  08005a30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a30  08005a30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08005aa8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08005aa8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be81  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e49  00000000  00000000  0002bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018731  00000000  00000000  0002f710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e062  00000000  00000000  00047e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa63  00000000  00000000  00055ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5906  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  000e5958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800599c 	.word	0x0800599c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800599c 	.word	0x0800599c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <ADC_Select_CH4>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Select_CH4(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <ADC_Select_CH4+0x38>)
 8000fb2:	f001 faa1 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <ADC_Select_CH4+0x30>
	  {
	    Error_Handler();
 8000fbc:	f000 fdac 	bl	8001b18 <Error_Handler>
	  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000008c 	.word	0x2000008c

08000fcc <ADC_Select_CH5>:
void ADC_Select_CH5(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
		  */
		  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
		  sConfig.Channel = ADC_CHANNEL_5;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	60fb      	str	r3, [r7, #12]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <ADC_Select_CH5+0x38>)
 8000fee:	f001 fa83 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <ADC_Select_CH5+0x30>
		  {
		    Error_Handler();
 8000ff8:	f000 fd8e 	bl	8001b18 <Error_Handler>
		  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000008c 	.word	0x2000008c

08001008 <ADC_Select_CH6>:

void ADC_Select_CH6(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
			  */
			  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
			  sConfig.Channel = ADC_CHANNEL_6;
 8001018:	2306      	movs	r3, #6
 800101a:	607b      	str	r3, [r7, #4]
			  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101c:	2301      	movs	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
			  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001020:	2307      	movs	r3, #7
 8001022:	60fb      	str	r3, [r7, #12]
			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <ADC_Select_CH6+0x38>)
 800102a:	f001 fa65 	bl	80024f8 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <ADC_Select_CH6+0x30>
			  {
			    Error_Handler();
 8001034:	f000 fd70 	bl	8001b18 <Error_Handler>
			  }
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000008c 	.word	0x2000008c
 8001044:	00000000 	.word	0x00000000

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b0bd      	sub	sp, #244	; 0xf4
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	 int32_t dutyCycle = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	 int PWM;
	 int i;
	 uint8_t charValue[50];
	 uint8_t inDig[8];
	 uint8_t dataRec[8]={};
 8001054:	2300      	movs	r3, #0
 8001056:	653b      	str	r3, [r7, #80]	; 0x50
 8001058:	2300      	movs	r3, #0
 800105a:	657b      	str	r3, [r7, #84]	; 0x54
	 int dato[9]={};
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	2224      	movs	r2, #36	; 0x24
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f004 f817 	bl	8005098 <memset>
	 float temperatura;
	 int rec = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  // ----------------------------Variables usadas para el filtrado-----------------------------------
	 float y[2] = {0.0,0.0};
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
	 float x[2] = {0.0,0.0};
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
	 float frec_corte = 2*3.14*0.1;
 8001088:	4b9b      	ldr	r3, [pc, #620]	; (80012f8 <main+0x2b0>)
 800108a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	 float A1, A2, A3;
	 float suavizar = 0;
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	 int ADC_filtrado;
 // ----------------------------Variables usadas para la discretizacion del PID-----------------------------------
	 float referencia;
	 float retro; 					// Retroalimentacion
	 float e[3] = {0.0,0.0,0.0}; 	//Almacenamos el error actual, el error anterior y el anterior 2 veces
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
	 float u[3] = {0.0,0.0,0.0}; 	// Almacena la salida actual, la anterior y la anterior 2 veces
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
	 float kp = 44;
 80010ba:	4b90      	ldr	r3, [pc, #576]	; (80012fc <main+0x2b4>)
 80010bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	 float ki = 1.53;
 80010c0:	4b8f      	ldr	r3, [pc, #572]	; (8001300 <main+0x2b8>)
 80010c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	 float kd = 100;
 80010c6:	4b8f      	ldr	r3, [pc, #572]	; (8001304 <main+0x2bc>)
 80010c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	 float T = 1;
 80010cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f000 fec6 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 fb56 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f000 fc7e 	bl	80019dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010e0:	f000 fc52 	bl	8001988 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010e4:	f000 fbaa 	bl	800183c <MX_ADC1_Init>
  MX_TIM2_Init();
 80010e8:	f000 fbd8 	bl	800189c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010ec:	2104      	movs	r1, #4
 80010ee:	4886      	ldr	r0, [pc, #536]	; (8001308 <main+0x2c0>)
 80010f0:	f002 fd40 	bl	8003b74 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  suavizar = 0;
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//------------LECTURA PUERTO SERIE: Los datos estan guardados como ASCII, el programa no avanza hasta que se reciben datos----------------------//
	  HAL_UART_Receive_IT(&huart2, (uint16_t*)dataRec, sizeof(dataRec));
 80010fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001100:	2208      	movs	r2, #8
 8001102:	4619      	mov	r1, r3
 8001104:	4881      	ldr	r0, [pc, #516]	; (800130c <main+0x2c4>)
 8001106:	f003 fb3a 	bl	800477e <HAL_UART_Receive_IT>

	  dato[0] = (int)(dataRec[0]);
 800110a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  dato[1] = (int)(dataRec[1]);
 8001110:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001114:	633b      	str	r3, [r7, #48]	; 0x30

	  if(rec<=-500)
 8001116:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800111a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800111e:	dc03      	bgt.n	8001128 <main+0xe0>
	  {
		  rec=0;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001126:	e00c      	b.n	8001142 <main+0xfa>
	  }
	  else
	  {
	  rec = (dato[0]-48)*10 + (dato[1]-48);
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	461a      	mov	r2, r3
 8001138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113a:	3b30      	subs	r3, #48	; 0x30
 800113c:	4413      	add	r3, r2
 800113e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	  }

 //-------------------------------------------DEFINICION DEL ESTADO DE LAS SALIDAS--------------------------------------------------------------//

	  if(dato[0]==49)
 8001142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001144:	2b31      	cmp	r3, #49	; 0x31
 8001146:	d106      	bne.n	8001156 <main+0x10e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800114e:	4870      	ldr	r0, [pc, #448]	; (8001310 <main+0x2c8>)
 8001150:	f001 febf 	bl	8002ed2 <HAL_GPIO_WritePin>
 8001154:	e005      	b.n	8001162 <main+0x11a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115c:	486c      	ldr	r0, [pc, #432]	; (8001310 <main+0x2c8>)
 800115e:	f001 feb8 	bl	8002ed2 <HAL_GPIO_WritePin>
	  }
	  if(dato[1]==49)
 8001162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001164:	2b31      	cmp	r3, #49	; 0x31
 8001166:	d106      	bne.n	8001176 <main+0x12e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116e:	4868      	ldr	r0, [pc, #416]	; (8001310 <main+0x2c8>)
 8001170:	f001 feaf 	bl	8002ed2 <HAL_GPIO_WritePin>
 8001174:	e005      	b.n	8001182 <main+0x13a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	4864      	ldr	r0, [pc, #400]	; (8001310 <main+0x2c8>)
 800117e:	f001 fea8 	bl	8002ed2 <HAL_GPIO_WritePin>
	  }
	  if(dato[2]==49)
 8001182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001184:	2b31      	cmp	r3, #49	; 0x31
 8001186:	d106      	bne.n	8001196 <main+0x14e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118e:	4860      	ldr	r0, [pc, #384]	; (8001310 <main+0x2c8>)
 8001190:	f001 fe9f 	bl	8002ed2 <HAL_GPIO_WritePin>
 8001194:	e005      	b.n	80011a2 <main+0x15a>
	  }else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 7100 	mov.w	r1, #512	; 0x200
 800119c:	485c      	ldr	r0, [pc, #368]	; (8001310 <main+0x2c8>)
 800119e:	f001 fe98 	bl	8002ed2 <HAL_GPIO_WritePin>
	  }
	  if(dato[3]==49)
 80011a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a4:	2b31      	cmp	r3, #49	; 0x31
 80011a6:	d106      	bne.n	80011b6 <main+0x16e>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ae:	4858      	ldr	r0, [pc, #352]	; (8001310 <main+0x2c8>)
 80011b0:	f001 fe8f 	bl	8002ed2 <HAL_GPIO_WritePin>
 80011b4:	e005      	b.n	80011c2 <main+0x17a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011bc:	4854      	ldr	r0, [pc, #336]	; (8001310 <main+0x2c8>)
 80011be:	f001 fe88 	bl	8002ed2 <HAL_GPIO_WritePin>
	  }
	  if(dato[4]==49)
 80011c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011c4:	2b31      	cmp	r3, #49	; 0x31
 80011c6:	d106      	bne.n	80011d6 <main+0x18e>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ce:	4851      	ldr	r0, [pc, #324]	; (8001314 <main+0x2cc>)
 80011d0:	f001 fe7f 	bl	8002ed2 <HAL_GPIO_WritePin>
 80011d4:	e005      	b.n	80011e2 <main+0x19a>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011dc:	484d      	ldr	r0, [pc, #308]	; (8001314 <main+0x2cc>)
 80011de:	f001 fe78 	bl	8002ed2 <HAL_GPIO_WritePin>
	  }
	  if(dato[5]==49)
 80011e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e4:	2b31      	cmp	r3, #49	; 0x31
 80011e6:	d106      	bne.n	80011f6 <main+0x1ae>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ee:	4849      	ldr	r0, [pc, #292]	; (8001314 <main+0x2cc>)
 80011f0:	f001 fe6f 	bl	8002ed2 <HAL_GPIO_WritePin>
 80011f4:	e005      	b.n	8001202 <main+0x1ba>
	  }else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	4845      	ldr	r0, [pc, #276]	; (8001314 <main+0x2cc>)
 80011fe:	f001 fe68 	bl	8002ed2 <HAL_GPIO_WritePin>
	  }
	  if(dato[6]==49)
 8001202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001204:	2b31      	cmp	r3, #49	; 0x31
 8001206:	d106      	bne.n	8001216 <main+0x1ce>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120e:	4841      	ldr	r0, [pc, #260]	; (8001314 <main+0x2cc>)
 8001210:	f001 fe5f 	bl	8002ed2 <HAL_GPIO_WritePin>
 8001214:	e005      	b.n	8001222 <main+0x1da>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	483d      	ldr	r0, [pc, #244]	; (8001314 <main+0x2cc>)
 800121e:	f001 fe58 	bl	8002ed2 <HAL_GPIO_WritePin>
	  }
	  if(dato[7]==49)
 8001222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001224:	2b31      	cmp	r3, #49	; 0x31
 8001226:	d106      	bne.n	8001236 <main+0x1ee>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122e:	4839      	ldr	r0, [pc, #228]	; (8001314 <main+0x2cc>)
 8001230:	f001 fe4f 	bl	8002ed2 <HAL_GPIO_WritePin>
 8001234:	e005      	b.n	8001242 <main+0x1fa>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123c:	4835      	ldr	r0, [pc, #212]	; (8001314 <main+0x2cc>)
 800123e:	f001 fe48 	bl	8002ed2 <HAL_GPIO_WritePin>

	  /*if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
	   {inDig[0] = 1;}
	   else{inDig[0] = 0;}*/

	  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	4832      	ldr	r0, [pc, #200]	; (8001310 <main+0x2c8>)
 8001246:	f001 fe2d 	bl	8002ea4 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <main+0x210>
	  	{inDig[2] = 1;}
 8001250:	2301      	movs	r3, #1
 8001252:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001256:	e002      	b.n	800125e <main+0x216>
	  	else{inDig[2] = 0;}
 8001258:	2300      	movs	r3, #0
 800125a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 800125e:	2101      	movs	r1, #1
 8001260:	482c      	ldr	r0, [pc, #176]	; (8001314 <main+0x2cc>)
 8001262:	f001 fe1f 	bl	8002ea4 <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <main+0x22c>
	  	{inDig[3] = 1;}
 800126c:	2301      	movs	r3, #1
 800126e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001272:	e002      	b.n	800127a <main+0x232>
	  	else{inDig[3] = 0;}
 8001274:	2300      	movs	r3, #0
 8001276:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 800127a:	2102      	movs	r1, #2
 800127c:	4825      	ldr	r0, [pc, #148]	; (8001314 <main+0x2cc>)
 800127e:	f001 fe11 	bl	8002ea4 <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <main+0x248>
	  	{inDig[4] = 1;}
 8001288:	2301      	movs	r3, #1
 800128a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800128e:	e002      	b.n	8001296 <main+0x24e>
	  	else{inDig[4] = 0;}
 8001290:	2300      	movs	r3, #0
 8001292:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10))
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	481e      	ldr	r0, [pc, #120]	; (8001314 <main+0x2cc>)
 800129c:	f001 fe02 	bl	8002ea4 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <main+0x266>
	  	{inDig[5] = 1;}
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80012ac:	e002      	b.n	80012b4 <main+0x26c>
	  	else{inDig[5] = 0;}
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))
 80012b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <main+0x2cc>)
 80012ba:	f001 fdf3 	bl	8002ea4 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <main+0x284>
	  	{inDig[6] = 1;}
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80012ca:	e002      	b.n	80012d2 <main+0x28a>
	  	else{inDig[6] = 0;}
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80012d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d6:	480f      	ldr	r0, [pc, #60]	; (8001314 <main+0x2cc>)
 80012d8:	f001 fde4 	bl	8002ea4 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <main+0x2a2>
	  	{inDig[7] = 1;}
 80012e2:	2301      	movs	r3, #1
 80012e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80012e8:	e002      	b.n	80012f0 <main+0x2a8>
	  	else{inDig[7] = 0;}
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

 //-------------------------------------------ETAPA MANEJO DE ADC--------------------------------------------------------------//
	  for(i = 0; i <10; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80012f6:	e036      	b.n	8001366 <main+0x31e>
 80012f8:	3f20c49c 	.word	0x3f20c49c
 80012fc:	42300000 	.word	0x42300000
 8001300:	3fc3d70a 	.word	0x3fc3d70a
 8001304:	42c80000 	.word	0x42c80000
 8001308:	200000bc 	.word	0x200000bc
 800130c:	20000104 	.word	0x20000104
 8001310:	40010800 	.word	0x40010800
 8001314:	40010c00 	.word	0x40010c00
	  {
	  	//CANAL 4
	  	ADC_Select_CH4();
 8001318:	f7ff fe3a 	bl	8000f90 <ADC_Select_CH4>
	  	HAL_ADC_Start(&hadc1);
 800131c:	4884      	ldr	r0, [pc, #528]	; (8001530 <main+0x4e8>)
 800131e:	f000 feff 	bl	8002120 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001322:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001326:	4882      	ldr	r0, [pc, #520]	; (8001530 <main+0x4e8>)
 8001328:	f000 ffd4 	bl	80022d4 <HAL_ADC_PollForConversion>
	  	ADCValue[0]= HAL_ADC_GetValue(&hadc1);
 800132c:	4880      	ldr	r0, [pc, #512]	; (8001530 <main+0x4e8>)
 800132e:	f001 f8d7 	bl	80024e0 <HAL_ADC_GetValue>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b7f      	ldr	r3, [pc, #508]	; (8001534 <main+0x4ec>)
 8001338:	801a      	strh	r2, [r3, #0]
	  	HAL_ADC_Stop(&hadc1);
 800133a:	487d      	ldr	r0, [pc, #500]	; (8001530 <main+0x4e8>)
 800133c:	f000 ff9e 	bl	800227c <HAL_ADC_Stop>
	  	suavizar = ADCValue[0] + suavizar;
 8001340:	4b7c      	ldr	r3, [pc, #496]	; (8001534 <main+0x4ec>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fbe3 	bl	8000b10 <__aeabi_i2f>
 800134a:	4603      	mov	r3, r0
 800134c:	4619      	mov	r1, r3
 800134e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001352:	f7ff fb29 	bl	80009a8 <__addsf3>
 8001356:	4603      	mov	r3, r0
 8001358:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  for(i = 0; i <10; i++)
 800135c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001360:	3301      	adds	r3, #1
 8001362:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800136a:	2b09      	cmp	r3, #9
 800136c:	ddd4      	ble.n	8001318 <main+0x2d0>
	  }

	  	//CANAL 5
	  	ADC_Select_CH5();
 800136e:	f7ff fe2d 	bl	8000fcc <ADC_Select_CH5>
	  	HAL_ADC_Start(&hadc1);
 8001372:	486f      	ldr	r0, [pc, #444]	; (8001530 <main+0x4e8>)
 8001374:	f000 fed4 	bl	8002120 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001378:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800137c:	486c      	ldr	r0, [pc, #432]	; (8001530 <main+0x4e8>)
 800137e:	f000 ffa9 	bl	80022d4 <HAL_ADC_PollForConversion>
	  	ADCValue[1]= HAL_ADC_GetValue(&hadc1);
 8001382:	486b      	ldr	r0, [pc, #428]	; (8001530 <main+0x4e8>)
 8001384:	f001 f8ac 	bl	80024e0 <HAL_ADC_GetValue>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <main+0x4ec>)
 800138e:	805a      	strh	r2, [r3, #2]
	  	HAL_ADC_Stop(&hadc1);
 8001390:	4867      	ldr	r0, [pc, #412]	; (8001530 <main+0x4e8>)
 8001392:	f000 ff73 	bl	800227c <HAL_ADC_Stop>
	  	//CANAL 6
	 	ADC_Select_CH6();
 8001396:	f7ff fe37 	bl	8001008 <ADC_Select_CH6>
	  	HAL_ADC_Start(&hadc1);
 800139a:	4865      	ldr	r0, [pc, #404]	; (8001530 <main+0x4e8>)
 800139c:	f000 fec0 	bl	8002120 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 80013a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a4:	4862      	ldr	r0, [pc, #392]	; (8001530 <main+0x4e8>)
 80013a6:	f000 ff95 	bl	80022d4 <HAL_ADC_PollForConversion>
	  	ADCValue[2]= HAL_ADC_GetValue(&hadc1);
 80013aa:	4861      	ldr	r0, [pc, #388]	; (8001530 <main+0x4e8>)
 80013ac:	f001 f898 	bl	80024e0 <HAL_ADC_GetValue>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <main+0x4ec>)
 80013b6:	809a      	strh	r2, [r3, #4]
	  	HAL_ADC_Stop(&hadc1);
 80013b8:	485d      	ldr	r0, [pc, #372]	; (8001530 <main+0x4e8>)
 80013ba:	f000 ff5f 	bl	800227c <HAL_ADC_Stop>

	  	x[0] = suavizar/10;
 80013be:	495e      	ldr	r1, [pc, #376]	; (8001538 <main+0x4f0>)
 80013c0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80013c4:	f7ff fcac 	bl	8000d20 <__aeabi_fdiv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	61fb      	str	r3, [r7, #28]
  //-------------------------------------------FILTRADO ADC--------------------------------------------------------------------------//
	  	A1 = (frec_corte*T)/(2+frec_corte*T);
 80013cc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80013d0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80013d4:	f7ff fbf0 	bl	8000bb8 <__aeabi_fmul>
 80013d8:	4603      	mov	r3, r0
 80013da:	461c      	mov	r4, r3
 80013dc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80013e0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80013e4:	f7ff fbe8 	bl	8000bb8 <__aeabi_fmul>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fada 	bl	80009a8 <__addsf3>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fc91 	bl	8000d20 <__aeabi_fdiv>
 80013fe:	4603      	mov	r3, r0
 8001400:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  	A2 = A1;
 8001404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001408:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  	A3 = (frec_corte*T-2)/(2+frec_corte*T);
 800140c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001410:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001414:	f7ff fbd0 	bl	8000bb8 <__aeabi_fmul>
 8001418:	4603      	mov	r3, r0
 800141a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fac0 	bl	80009a4 <__aeabi_fsub>
 8001424:	4603      	mov	r3, r0
 8001426:	461c      	mov	r4, r3
 8001428:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800142c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001430:	f7ff fbc2 	bl	8000bb8 <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fab4 	bl	80009a8 <__addsf3>
 8001440:	4603      	mov	r3, r0
 8001442:	4619      	mov	r1, r3
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff fc6b 	bl	8000d20 <__aeabi_fdiv>
 800144a:	4603      	mov	r3, r0
 800144c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	  	y[0] = A1*x[0]+A2*x[1]-y[1]*A3;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fbae 	bl	8000bb8 <__aeabi_fmul>
 800145c:	4603      	mov	r3, r0
 800145e:	461c      	mov	r4, r3
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fba6 	bl	8000bb8 <__aeabi_fmul>
 800146c:	4603      	mov	r3, r0
 800146e:	4619      	mov	r1, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fa99 	bl	80009a8 <__addsf3>
 8001476:	4603      	mov	r3, r0
 8001478:	461c      	mov	r4, r3
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fb99 	bl	8000bb8 <__aeabi_fmul>
 8001486:	4603      	mov	r3, r0
 8001488:	4619      	mov	r1, r3
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff fa8a 	bl	80009a4 <__aeabi_fsub>
 8001490:	4603      	mov	r3, r0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
	  	ADC_filtrado = (int)y[0];
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd54 	bl	8000f44 <__aeabi_f2iz>
 800149c:	4603      	mov	r3, r0
 800149e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  //-------------------------------------------FLAG CONTROL TEMPERATURA--------------------------------------------------------------//
	  	temperatura = (3.3*y[0]/4095)/0.01;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe ffbf 	bl	8000428 <__aeabi_f2d>
 80014aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001518 <main+0x4d0>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f812 	bl	80004d8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	a318      	add	r3, pc, #96	; (adr r3, 8001520 <main+0x4d8>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f933 	bl	800072c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	a316      	add	r3, pc, #88	; (adr r3, 8001528 <main+0x4e0>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f92a 	bl	800072c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fa0c 	bl	80008fc <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  //-------------------------------------------CALCULO DEL PID--------------------------------------------------------------------
	  	referencia = rec;	 				 // Referencia deseada de temperatura
 80014ea:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80014ee:	f7ff fb0f 	bl	8000b10 <__aeabi_i2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  	retro = temperatura; 				 // Valor leido por parte del sensor LM35
 80014f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  	  	if(temperatura<20)
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <main+0x4f4>)
 8001502:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001506:	f7ff fcf5 	bl	8000ef4 <__aeabi_fcmplt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d017      	beq.n	8001540 <main+0x4f8>
  	  	{
  	  		e[0] = 0;
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	e01b      	b.n	8001550 <main+0x508>
 8001518:	66666666 	.word	0x66666666
 800151c:	400a6666 	.word	0x400a6666
 8001520:	00000000 	.word	0x00000000
 8001524:	40affe00 	.word	0x40affe00
 8001528:	47ae147b 	.word	0x47ae147b
 800152c:	3f847ae1 	.word	0x3f847ae1
 8001530:	2000008c 	.word	0x2000008c
 8001534:	20000148 	.word	0x20000148
 8001538:	41200000 	.word	0x41200000
 800153c:	41a00000 	.word	0x41a00000
  	  	}
  	  	else
  	  	{
  	  		e[0] = referencia - retro;
 8001540:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001544:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001548:	f7ff fa2c 	bl	80009a4 <__aeabi_fsub>
 800154c:	4603      	mov	r3, r0
 800154e:	613b      	str	r3, [r7, #16]
  	  	}
  	//-------------------------------------------CALCULO DEL PID--------------------------------------------------------------------
	  	K1 = kp+ki*(T/2)+kd*(2/T);   		 //Coeficiente que multiplica el error actual.
 8001550:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001554:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001558:	f7ff fbe2 	bl	8000d20 <__aeabi_fdiv>
 800155c:	4603      	mov	r3, r0
 800155e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb28 	bl	8000bb8 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
 800156a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fa1a 	bl	80009a8 <__addsf3>
 8001574:	4603      	mov	r3, r0
 8001576:	461c      	mov	r4, r3
 8001578:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800157c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001580:	f7ff fbce 	bl	8000d20 <__aeabi_fdiv>
 8001584:	4603      	mov	r3, r0
 8001586:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fb14 	bl	8000bb8 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff fa07 	bl	80009a8 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  	K2 = ki*T-kd*(4/T);			 		 //Coeficiente que multiplica el error previo.
 80015a0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80015a4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80015a8:	f7ff fb06 	bl	8000bb8 <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461c      	mov	r4, r3
 80015b0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80015b4:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80015b8:	f7ff fbb2 	bl	8000d20 <__aeabi_fdiv>
 80015bc:	4603      	mov	r3, r0
 80015be:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff faf8 	bl	8000bb8 <__aeabi_fmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff f9e9 	bl	80009a4 <__aeabi_fsub>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  	K3 = ki*(T/2)+kd*(2/T)-kp;			 //Coeficiente que multiplica el error dos veces previo.
 80015d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015dc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80015e0:	f7ff fb9e 	bl	8000d20 <__aeabi_fdiv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fae4 	bl	8000bb8 <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461c      	mov	r4, r3
 80015f4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80015f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015fc:	f7ff fb90 	bl	8000d20 <__aeabi_fdiv>
 8001600:	4603      	mov	r3, r0
 8001602:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fad6 	bl	8000bb8 <__aeabi_fmul>
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff f9c9 	bl	80009a8 <__addsf3>
 8001616:	4603      	mov	r3, r0
 8001618:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff f9c1 	bl	80009a4 <__aeabi_fsub>
 8001622:	4603      	mov	r3, r0
 8001624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  	u[0] = K1*e[0]+K2*e[1]+K3*e[2]+u[2];
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fac2 	bl	8000bb8 <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	461c      	mov	r4, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff faba 	bl	8000bb8 <__aeabi_fmul>
 8001644:	4603      	mov	r3, r0
 8001646:	4619      	mov	r1, r3
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff f9ad 	bl	80009a8 <__addsf3>
 800164e:	4603      	mov	r3, r0
 8001650:	461c      	mov	r4, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff faad 	bl	8000bb8 <__aeabi_fmul>
 800165e:	4603      	mov	r3, r0
 8001660:	4619      	mov	r1, r3
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff f9a0 	bl	80009a8 <__addsf3>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f7ff f999 	bl	80009a8 <__addsf3>
 8001676:	4603      	mov	r3, r0
 8001678:	607b      	str	r3, [r7, #4]
	  	a1 = K1*e[0];
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4619      	mov	r1, r3
 800167e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001682:	f7ff fa99 	bl	8000bb8 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  	a2 = K2* e[1];
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4619      	mov	r1, r3
 8001690:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001694:	f7ff fa90 	bl	8000bb8 <__aeabi_fmul>
 8001698:	4603      	mov	r3, r0
 800169a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  	a3 = K3*e[2];
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80016a6:	f7ff fa87 	bl	8000bb8 <__aeabi_fmul>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  	//Ecuacion PID
  //-------------------------------------------Ajuste del PID (se establecen limitadores)-------------------------------------------
	  	if(u[0]>100)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4930      	ldr	r1, [pc, #192]	; (8001774 <main+0x72c>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fc3b 	bl	8000f30 <__aeabi_fcmpgt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <main+0x67c>
	  	{
	  		u[0] = 100;
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <main+0x72c>)
 80016c2:	607b      	str	r3, [r7, #4]
	  	}
	  	if(u[0]<0.0)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fc12 	bl	8000ef4 <__aeabi_fcmplt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <main+0x694>
	  	{
	  	    u[0] = 0;
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
	  	}
  //---------------------------------------------------CONTROL PWM------------------------------------------------------//
	  	dutyCycle =u[0]*65535/100;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4926      	ldr	r1, [pc, #152]	; (8001778 <main+0x730>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fa69 	bl	8000bb8 <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4922      	ldr	r1, [pc, #136]	; (8001774 <main+0x72c>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb18 	bl	8000d20 <__aeabi_fdiv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fc26 	bl	8000f44 <__aeabi_f2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	  	TIM2->CCR2 = dutyCycle;
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001706:	6393      	str	r3, [r2, #56]	; 0x38
	  	PWM = dutyCycle*100/65535;
 8001708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800170c:	2264      	movs	r2, #100	; 0x64
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	4a1a      	ldr	r2, [pc, #104]	; (800177c <main+0x734>)
 8001714:	fb82 1203 	smull	r1, r2, r2, r3
 8001718:	441a      	add	r2, r3
 800171a:	13d2      	asrs	r2, r2, #15
 800171c:	17db      	asrs	r3, r3, #31
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  //---------------------------------------------------CORRIMIENTOS------------------------------------------------------//
  //Corrimiento de errores
	  	e[2] = e[1];
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	61bb      	str	r3, [r7, #24]
	  	e[1] = e[0];
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	617b      	str	r3, [r7, #20]
  //Corrimiento de salidas
	  	u[2] = u[1];
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60fb      	str	r3, [r7, #12]
	  	u[1] = u[0];
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	60bb      	str	r3, [r7, #8]
  //Corrimiento elementos del filtro
	  	y[1] = y[0];
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
	  	x[1] = x[0];
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	623b      	str	r3, [r7, #32]
  //-------------------------------------------TRANSMISION VIA UART--------------------------------------------------------------//
  //	 sprintf(charValue, "%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,2\n",ADCValue[0],ADCValue[1],ADCValue[2], inDig[0],inDig[1],inDig[2],inDig[3],inDig[4],inDig[5],inDig[6],inDig[7]);
	  sprintf(charValue, "0,%lu,%lu,2\n",ADC_filtrado,PWM);
 800173c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001740:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001744:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001748:	490d      	ldr	r1, [pc, #52]	; (8001780 <main+0x738>)
 800174a:	f003 fcad 	bl	80050a8 <siprintf>
	  //sprintf(charValue, ",%lu\n",auxiliar);
	     HAL_UART_Transmit(&huart2, (uint8_t*)charValue, strlen(charValue),HAL_MAX_DELAY);
 800174e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fcfc 	bl	8000150 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <main+0x73c>)
 8001766:	f002 ff78 	bl	800465a <HAL_UART_Transmit>
 	     HAL_Delay(1000);
 800176a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800176e:	f000 fbdb 	bl	8001f28 <HAL_Delay>
	  suavizar = 0;
 8001772:	e4bf      	b.n	80010f4 <main+0xac>
 8001774:	42c80000 	.word	0x42c80000
 8001778:	477fff00 	.word	0x477fff00
 800177c:	80008001 	.word	0x80008001
 8001780:	080059b4 	.word	0x080059b4
 8001784:	20000104 	.word	0x20000104

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001792:	2228      	movs	r2, #40	; 0x28
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fc7e 	bl	8005098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c6:	2301      	movs	r3, #1
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80017d4:	2300      	movs	r3, #0
 80017d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 fb91 	bl	8002f04 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x64>
  {
    Error_Handler();
 80017e8:	f000 f996 	bl	8001b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ec:	230f      	movs	r3, #15
 80017ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fdfd 	bl	8003408 <HAL_RCC_ClockConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001814:	f000 f980 	bl	8001b18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001818:	2302      	movs	r3, #2
 800181a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f001 ff88 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800182e:	f000 f973 	bl	8001b18 <Error_Handler>
  }
}
 8001832:	bf00      	nop
 8001834:	3750      	adds	r7, #80	; 0x50
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_ADC1_Init+0x58>)
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <MX_ADC1_Init+0x5c>)
 8001850:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MX_ADC1_Init+0x58>)
 8001854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001858:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_ADC1_Init+0x58>)
 800185c:	2201      	movs	r2, #1
 800185e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <MX_ADC1_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MX_ADC1_Init+0x58>)
 8001868:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800186c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_ADC1_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <MX_ADC1_Init+0x58>)
 8001876:	2201      	movs	r2, #1
 8001878:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <MX_ADC1_Init+0x58>)
 800187c:	f000 fb78 	bl	8001f70 <HAL_ADC_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001886:	f000 f947 	bl	8001b18 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000008c 	.word	0x2000008c
 8001898:	40012400 	.word	0x40012400

0800189c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08e      	sub	sp, #56	; 0x38
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	615a      	str	r2, [r3, #20]
 80018ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <MX_TIM2_Init+0xe8>)
 80018ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <MX_TIM2_Init+0xe8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <MX_TIM2_Init+0xe8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <MX_TIM2_Init+0xe8>)
 80018e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <MX_TIM2_Init+0xe8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <MX_TIM2_Init+0xe8>)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f4:	4823      	ldr	r0, [pc, #140]	; (8001984 <MX_TIM2_Init+0xe8>)
 80018f6:	f002 f895 	bl	8003a24 <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001900:	f000 f90a 	bl	8001b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800190a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190e:	4619      	mov	r1, r3
 8001910:	481c      	ldr	r0, [pc, #112]	; (8001984 <MX_TIM2_Init+0xe8>)
 8001912:	f002 fa8f 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800191c:	f000 f8fc 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001920:	4818      	ldr	r0, [pc, #96]	; (8001984 <MX_TIM2_Init+0xe8>)
 8001922:	f002 f8ce 	bl	8003ac2 <HAL_TIM_PWM_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800192c:	f000 f8f4 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4619      	mov	r1, r3
 800193e:	4811      	ldr	r0, [pc, #68]	; (8001984 <MX_TIM2_Init+0xe8>)
 8001940:	f002 fde0 	bl	8004504 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800194a:	f000 f8e5 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194e:	2360      	movs	r3, #96	; 0x60
 8001950:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2204      	movs	r2, #4
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <MX_TIM2_Init+0xe8>)
 8001966:	f002 f9a7 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001970:	f000 f8d2 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <MX_TIM2_Init+0xe8>)
 8001976:	f000 f95f 	bl	8001c38 <HAL_TIM_MspPostInit>

}
 800197a:	bf00      	nop
 800197c:	3738      	adds	r7, #56	; 0x38
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200000bc 	.word	0x200000bc

08001988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <MX_USART2_UART_Init+0x50>)
 8001990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019c0:	f002 fdfe 	bl	80045c0 <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ca:	f000 f8a5 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000104 	.word	0x20000104
 80019d8:	40004400 	.word	0x40004400

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f0:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <MX_GPIO_Init+0x12c>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a44      	ldr	r2, [pc, #272]	; (8001b08 <MX_GPIO_Init+0x12c>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <MX_GPIO_Init+0x12c>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a08:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a3e      	ldr	r2, [pc, #248]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a0e:	f043 0320 	orr.w	r3, r3, #32
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a38:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <MX_GPIO_Init+0x12c>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a56:	482d      	ldr	r0, [pc, #180]	; (8001b0c <MX_GPIO_Init+0x130>)
 8001a58:	f001 fa3b 	bl	8002ed2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Salida8_Pin|Salida7_Pin|Salida6_Pin|Salida5_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001a62:	482b      	ldr	r0, [pc, #172]	; (8001b10 <MX_GPIO_Init+0x134>)
 8001a64:	f001 fa35 	bl	8002ed2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Salida4_Pin|Salida3_Pin|Salida2_Pin|Salida1_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001a6e:	4829      	ldr	r0, [pc, #164]	; (8001b14 <MX_GPIO_Init+0x138>)
 8001a70:	f001 fa2f 	bl	8002ed2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481f      	ldr	r0, [pc, #124]	; (8001b0c <MX_GPIO_Init+0x130>)
 8001a8e:	f001 f885 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Entrada1_Pin Entrada3_Pin */
  GPIO_InitStruct.Pin = Entrada1_Pin|Entrada3_Pin;
 8001a92:	2381      	movs	r3, #129	; 0x81
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481b      	ldr	r0, [pc, #108]	; (8001b14 <MX_GPIO_Init+0x138>)
 8001aa6:	f001 f879 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Entrada4_Pin Entrada5_Pin Entrada6_Pin Entrada7_Pin
                           Entrada8_Pin */
  GPIO_InitStruct.Pin = Entrada4_Pin|Entrada5_Pin|Entrada6_Pin|Entrada7_Pin
 8001aaa:	f640 6303 	movw	r3, #3587	; 0xe03
 8001aae:	613b      	str	r3, [r7, #16]
                          |Entrada8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	4814      	ldr	r0, [pc, #80]	; (8001b10 <MX_GPIO_Init+0x134>)
 8001ac0:	f001 f86c 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Salida8_Pin Salida7_Pin Salida6_Pin Salida5_Pin */
  GPIO_InitStruct.Pin = Salida8_Pin|Salida7_Pin|Salida6_Pin|Salida5_Pin;
 8001ac4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4619      	mov	r1, r3
 8001adc:	480c      	ldr	r0, [pc, #48]	; (8001b10 <MX_GPIO_Init+0x134>)
 8001ade:	f001 f85d 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Salida4_Pin Salida3_Pin Salida2_Pin Salida1_Pin */
  GPIO_InitStruct.Pin = Salida4_Pin|Salida3_Pin|Salida2_Pin|Salida1_Pin;
 8001ae2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <MX_GPIO_Init+0x138>)
 8001afc:	f001 f84e 	bl	8002b9c <HAL_GPIO_Init>

}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40010800 	.word	0x40010800

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <Error_Handler+0x8>
	...

08001b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_MspInit+0x5c>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_MspInit+0x60>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_MspInit+0x60>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010000 	.word	0x40010000

08001b88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_ADC_MspInit+0x6c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d121      	bne.n	8001bec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_ADC_MspInit+0x70>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <HAL_ADC_MspInit+0x70>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_ADC_MspInit+0x70>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_ADC_MspInit+0x70>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <HAL_ADC_MspInit+0x70>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_ADC_MspInit+0x70>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001bd8:	2370      	movs	r3, #112	; 0x70
 8001bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4619      	mov	r1, r3
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <HAL_ADC_MspInit+0x74>)
 8001be8:	f000 ffd8 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40012400 	.word	0x40012400
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010800 	.word	0x40010800

08001c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d10b      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_TIM_Base_MspInit+0x34>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_TIM_Base_MspInit+0x34>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_TIM_Base_MspInit+0x34>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c56:	d117      	bne.n	8001c88 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_TIM_MspPostInit+0x58>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <HAL_TIM_MspPostInit+0x58>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_TIM_MspPostInit+0x58>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c70:	2302      	movs	r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	4804      	ldr	r0, [pc, #16]	; (8001c94 <HAL_TIM_MspPostInit+0x5c>)
 8001c84:	f000 ff8a 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010800 	.word	0x40010800

08001c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_UART_MspInit+0x98>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d137      	bne.n	8001d28 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_UART_MspInit+0x9c>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	4a1d      	ldr	r2, [pc, #116]	; (8001d34 <HAL_UART_MspInit+0x9c>)
 8001cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc2:	61d3      	str	r3, [r2, #28]
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_UART_MspInit+0x9c>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_UART_MspInit+0x9c>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0x9c>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_UART_MspInit+0x9c>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480f      	ldr	r0, [pc, #60]	; (8001d38 <HAL_UART_MspInit+0xa0>)
 8001cfc:	f000 ff4e 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d00:	2308      	movs	r3, #8
 8001d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <HAL_UART_MspInit+0xa0>)
 8001d14:	f000 ff42 	bl	8002b9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2026      	movs	r0, #38	; 0x26
 8001d1e:	f000 fe56 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d22:	2026      	movs	r0, #38	; 0x26
 8001d24:	f000 fe6f 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40004400 	.word	0x40004400
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010800 	.word	0x40010800

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d82:	f000 f8b5 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <USART2_IRQHandler+0x10>)
 8001d92:	f002 fd25 	bl	80047e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000104 	.word	0x20000104

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f003 f938 	bl	8005044 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20005000 	.word	0x20005000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000150 	.word	0x20000150
 8001e08:	20000168 	.word	0x20000168

08001e0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1a:	490d      	ldr	r1, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e30:	4c0a      	ldr	r4, [pc, #40]	; (8001e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e3e:	f7ff ffe5 	bl	8001e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f003 f905 	bl	8005050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e46:	f7ff f8ff 	bl	8001048 <main>
  bx lr
 8001e4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e54:	08005a38 	.word	0x08005a38
  ldr r2, =_sbss
 8001e58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e5c:	20000168 	.word	0x20000168

08001e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_2_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x28>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x28>)
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 fd9f 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fe50 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fdb7 	bl	8002a22 <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 fd7f 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_IncTick+0x1c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_IncTick+0x20>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_IncTick+0x20>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000154 	.word	0x20000154

08001f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <HAL_GetTick+0x10>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	20000154 	.word	0x20000154

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fff0 	bl	8001f14 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffe0 	bl	8001f14 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008

08001f70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0be      	b.n	8002110 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fdea 	bl	8001b88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fbf1 	bl	800279c <ADC_ConversionStop_Disable>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 8099 	bne.w	80020fe <HAL_ADC_Init+0x18e>
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 8095 	bne.w	80020fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fdc:	f023 0302 	bic.w	r3, r3, #2
 8001fe0:	f043 0202 	orr.w	r2, r3, #2
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ff0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7b1b      	ldrb	r3, [r3, #12]
 8001ff6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ff8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002008:	d003      	beq.n	8002012 <HAL_ADC_Init+0xa2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_ADC_Init+0xa8>
 8002012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002016:	e000      	b.n	800201a <HAL_ADC_Init+0xaa>
 8002018:	2300      	movs	r3, #0
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7d1b      	ldrb	r3, [r3, #20]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d119      	bne.n	800205c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7b1b      	ldrb	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	3b01      	subs	r3, #1
 8002036:	035a      	lsls	r2, r3, #13
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	e00b      	b.n	800205c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_ADC_Init+0x1a8>)
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	430b      	orrs	r3, r1
 8002082:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208c:	d003      	beq.n	8002096 <HAL_ADC_Init+0x126>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d104      	bne.n	80020a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	3b01      	subs	r3, #1
 800209c:	051b      	lsls	r3, r3, #20
 800209e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_ADC_Init+0x1ac>)
 80020bc:	4013      	ands	r3, r2
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d10b      	bne.n	80020dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020da:	e018      	b.n	800210e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f023 0312 	bic.w	r3, r3, #18
 80020e4:	f043 0210 	orr.w	r2, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020fc:	e007      	b.n	800210e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	f043 0210 	orr.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800210e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	ffe1f7fd 	.word	0xffe1f7fd
 800211c:	ff1f0efe 	.word	0xff1f0efe

08002120 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_Start+0x1a>
 8002136:	2302      	movs	r3, #2
 8002138:	e098      	b.n	800226c <HAL_ADC_Start+0x14c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fad0 	bl	80026e8 <ADC_Enable>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 8087 	bne.w	8002262 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a41      	ldr	r2, [pc, #260]	; (8002274 <HAL_ADC_Start+0x154>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d105      	bne.n	800217e <HAL_ADC_Start+0x5e>
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_ADC_Start+0x158>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002194:	2b00      	cmp	r3, #0
 8002196:	d026      	beq.n	80021e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021a8:	e01d      	b.n	80021e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <HAL_ADC_Start+0x158>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d004      	beq.n	80021ca <HAL_ADC_Start+0xaa>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <HAL_ADC_Start+0x154>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10d      	bne.n	80021e6 <HAL_ADC_Start+0xc6>
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_ADC_Start+0x158>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f023 0206 	bic.w	r2, r3, #6
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80021fe:	e002      	b.n	8002206 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0202 	mvn.w	r2, #2
 8002216:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002222:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002226:	d113      	bne.n	8002250 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_ADC_Start+0x154>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d105      	bne.n	800223e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_ADC_Start+0x158>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800223a:	2b00      	cmp	r3, #0
 800223c:	d108      	bne.n	8002250 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	e00c      	b.n	800226a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	e003      	b.n	800226a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40012800 	.word	0x40012800
 8002278:	40012400 	.word	0x40012400

0800227c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Stop+0x1a>
 8002292:	2302      	movs	r3, #2
 8002294:	e01a      	b.n	80022cc <HAL_ADC_Stop+0x50>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fa7c 	bl	800279c <ADC_ConversionStop_Disable>
 80022a4:	4603      	mov	r3, r0
 80022a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80022ea:	f7ff fe13 	bl	8001f14 <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0d3      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d131      	bne.n	8002388 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800232e:	2b00      	cmp	r3, #0
 8002330:	d12a      	bne.n	8002388 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002332:	e021      	b.n	8002378 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d01d      	beq.n	8002378 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_ADC_PollForConversion+0x7e>
 8002342:	f7ff fde7 	bl	8001f14 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d212      	bcs.n	8002378 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	f043 0204 	orr.w	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0a2      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0d6      	beq.n	8002334 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002386:	e070      	b.n	800246a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002388:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <HAL_ADC_PollForConversion+0x1f4>)
 800238a:	681c      	ldr	r4, [r3, #0]
 800238c:	2002      	movs	r0, #2
 800238e:	f001 fa89 	bl	80038a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002392:	4603      	mov	r3, r0
 8002394:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <HAL_ADC_PollForConversion+0x1f8>)
 80023a0:	400b      	ands	r3, r1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_ADC_PollForConversion+0x104>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68d9      	ldr	r1, [r3, #12]
 80023ac:	4b48      	ldr	r3, [pc, #288]	; (80024d0 <HAL_ADC_PollForConversion+0x1fc>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <HAL_ADC_PollForConversion+0x104>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6919      	ldr	r1, [r3, #16]
 80023ba:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <HAL_ADC_PollForConversion+0x200>)
 80023bc:	400b      	ands	r3, r1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d108      	bne.n	80023d4 <HAL_ADC_PollForConversion+0x100>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68d9      	ldr	r1, [r3, #12]
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_ADC_PollForConversion+0x204>)
 80023ca:	400b      	ands	r3, r1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_PollForConversion+0x100>
 80023d0:	2314      	movs	r3, #20
 80023d2:	e020      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 80023d4:	2329      	movs	r3, #41	; 0x29
 80023d6:	e01e      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_ADC_PollForConversion+0x200>)
 80023e0:	400b      	ands	r3, r1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_ADC_PollForConversion+0x120>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_ADC_PollForConversion+0x204>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <HAL_ADC_PollForConversion+0x13c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_ADC_PollForConversion+0x208>)
 80023fc:	400b      	ands	r3, r1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_ADC_PollForConversion+0x140>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_ADC_PollForConversion+0x208>)
 800240a:	400b      	ands	r3, r1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_PollForConversion+0x140>
 8002410:	2354      	movs	r3, #84	; 0x54
 8002412:	e000      	b.n	8002416 <HAL_ADC_PollForConversion+0x142>
 8002414:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800241c:	e021      	b.n	8002462 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d01a      	beq.n	800245c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_ADC_PollForConversion+0x168>
 800242c:	f7ff fd72 	bl	8001f14 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d20f      	bcs.n	800245c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d90b      	bls.n	800245c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f043 0204 	orr.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e030      	b.n	80024be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d8d9      	bhi.n	800241e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f06f 0212 	mvn.w	r2, #18
 8002472:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800248a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800248e:	d115      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000000 	.word	0x20000000
 80024cc:	24924924 	.word	0x24924924
 80024d0:	00924924 	.word	0x00924924
 80024d4:	12492492 	.word	0x12492492
 80024d8:	00492492 	.word	0x00492492
 80024dc:	00249249 	.word	0x00249249

080024e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x20>
 8002514:	2302      	movs	r3, #2
 8002516:	e0dc      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x1da>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b06      	cmp	r3, #6
 8002526:	d81c      	bhi.n	8002562 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b05      	subs	r3, #5
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	4019      	ands	r1, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b05      	subs	r3, #5
 8002554:	fa00 f203 	lsl.w	r2, r0, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	635a      	str	r2, [r3, #52]	; 0x34
 8002560:	e03c      	b.n	80025dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d81c      	bhi.n	80025a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	3b23      	subs	r3, #35	; 0x23
 800257c:	221f      	movs	r2, #31
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	4019      	ands	r1, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b23      	subs	r3, #35	; 0x23
 8002596:	fa00 f203 	lsl.w	r2, r0, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
 80025a2:	e01b      	b.n	80025dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	3b41      	subs	r3, #65	; 0x41
 80025b6:	221f      	movs	r2, #31
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	4019      	ands	r1, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b41      	subs	r3, #65	; 0x41
 80025d0:	fa00 f203 	lsl.w	r2, r0, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d91c      	bls.n	800261e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	3b1e      	subs	r3, #30
 80025f6:	2207      	movs	r2, #7
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6898      	ldr	r0, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	3b1e      	subs	r3, #30
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	e019      	b.n	8002652 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6919      	ldr	r1, [r3, #16]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	2207      	movs	r2, #7
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	4019      	ands	r1, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6898      	ldr	r0, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	fa00 f203 	lsl.w	r2, r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b10      	cmp	r3, #16
 8002658:	d003      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800265e:	2b11      	cmp	r3, #17
 8002660:	d132      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d125      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d126      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002688:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b10      	cmp	r3, #16
 8002690:	d11a      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	0c9a      	lsrs	r2, r3, #18
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f9      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x1b2>
 80026b6:	e007      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40012400 	.word	0x40012400
 80026e0:	20000000 	.word	0x20000000
 80026e4:	431bde83 	.word	0x431bde83

080026e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d040      	beq.n	8002788 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002716:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <ADC_Enable+0xac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <ADC_Enable+0xb0>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	0c9b      	lsrs	r3, r3, #18
 8002722:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002724:	e002      	b.n	800272c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3b01      	subs	r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f9      	bne.n	8002726 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002732:	f7ff fbef 	bl	8001f14 <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002738:	e01f      	b.n	800277a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800273a:	f7ff fbeb 	bl	8001f14 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d918      	bls.n	800277a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d011      	beq.n	800277a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d1d8      	bne.n	800273a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000000 	.word	0x20000000
 8002798:	431bde83 	.word	0x431bde83

0800279c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d12e      	bne.n	8002814 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027c6:	f7ff fba5 	bl	8001f14 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027cc:	e01b      	b.n	8002806 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ce:	f7ff fba1 	bl	8001f14 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d914      	bls.n	8002806 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10d      	bne.n	8002806 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f043 0210 	orr.w	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f043 0201 	orr.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e007      	b.n	8002816 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d0dc      	beq.n	80027ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <__NVIC_EnableIRQ+0x34>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff90 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff2d 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff42 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff90 	bl	8002910 <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5f 	bl	80028bc <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff35 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d008      	beq.n	8002a62 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2204      	movs	r2, #4
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e020      	b.n	8002aa4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 020e 	bic.w	r2, r2, #14
 8002a70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d005      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e051      	b.n	8002b76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 020e 	bic.w	r2, r2, #14
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <HAL_DMA_Abort_IT+0xd0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d029      	beq.n	8002b50 <HAL_DMA_Abort_IT+0xa0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_DMA_Abort_IT+0xd4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d022      	beq.n	8002b4c <HAL_DMA_Abort_IT+0x9c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_DMA_Abort_IT+0xd8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d01a      	beq.n	8002b46 <HAL_DMA_Abort_IT+0x96>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_DMA_Abort_IT+0xdc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d012      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x90>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_DMA_Abort_IT+0xe0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00a      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x8a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <HAL_DMA_Abort_IT+0xe4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d102      	bne.n	8002b34 <HAL_DMA_Abort_IT+0x84>
 8002b2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b32:	e00e      	b.n	8002b52 <HAL_DMA_Abort_IT+0xa2>
 8002b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b38:	e00b      	b.n	8002b52 <HAL_DMA_Abort_IT+0xa2>
 8002b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b3e:	e008      	b.n	8002b52 <HAL_DMA_Abort_IT+0xa2>
 8002b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b44:	e005      	b.n	8002b52 <HAL_DMA_Abort_IT+0xa2>
 8002b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b4a:	e002      	b.n	8002b52 <HAL_DMA_Abort_IT+0xa2>
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	e000      	b.n	8002b52 <HAL_DMA_Abort_IT+0xa2>
 8002b50:	2301      	movs	r3, #1
 8002b52:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <HAL_DMA_Abort_IT+0xe8>)
 8002b54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
    } 
  }
  return status;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40020008 	.word	0x40020008
 8002b84:	4002001c 	.word	0x4002001c
 8002b88:	40020030 	.word	0x40020030
 8002b8c:	40020044 	.word	0x40020044
 8002b90:	40020058 	.word	0x40020058
 8002b94:	4002006c 	.word	0x4002006c
 8002b98:	40020000 	.word	0x40020000

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b08b      	sub	sp, #44	; 0x2c
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bae:	e169      	b.n	8002e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8158 	bne.w	8002e7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a9a      	ldr	r2, [pc, #616]	; (8002e3c <HAL_GPIO_Init+0x2a0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d05e      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bd8:	4a98      	ldr	r2, [pc, #608]	; (8002e3c <HAL_GPIO_Init+0x2a0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d875      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bde:	4a98      	ldr	r2, [pc, #608]	; (8002e40 <HAL_GPIO_Init+0x2a4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d058      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002be4:	4a96      	ldr	r2, [pc, #600]	; (8002e40 <HAL_GPIO_Init+0x2a4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d86f      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bea:	4a96      	ldr	r2, [pc, #600]	; (8002e44 <HAL_GPIO_Init+0x2a8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d052      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bf0:	4a94      	ldr	r2, [pc, #592]	; (8002e44 <HAL_GPIO_Init+0x2a8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d869      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bf6:	4a94      	ldr	r2, [pc, #592]	; (8002e48 <HAL_GPIO_Init+0x2ac>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04c      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bfc:	4a92      	ldr	r2, [pc, #584]	; (8002e48 <HAL_GPIO_Init+0x2ac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d863      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c02:	4a92      	ldr	r2, [pc, #584]	; (8002e4c <HAL_GPIO_Init+0x2b0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d046      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002c08:	4a90      	ldr	r2, [pc, #576]	; (8002e4c <HAL_GPIO_Init+0x2b0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d85d      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c0e:	2b12      	cmp	r3, #18
 8002c10:	d82a      	bhi.n	8002c68 <HAL_GPIO_Init+0xcc>
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d859      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <HAL_GPIO_Init+0x80>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c97 	.word	0x08002c97
 8002c20:	08002c71 	.word	0x08002c71
 8002c24:	08002c83 	.word	0x08002c83
 8002c28:	08002cc5 	.word	0x08002cc5
 8002c2c:	08002ccb 	.word	0x08002ccb
 8002c30:	08002ccb 	.word	0x08002ccb
 8002c34:	08002ccb 	.word	0x08002ccb
 8002c38:	08002ccb 	.word	0x08002ccb
 8002c3c:	08002ccb 	.word	0x08002ccb
 8002c40:	08002ccb 	.word	0x08002ccb
 8002c44:	08002ccb 	.word	0x08002ccb
 8002c48:	08002ccb 	.word	0x08002ccb
 8002c4c:	08002ccb 	.word	0x08002ccb
 8002c50:	08002ccb 	.word	0x08002ccb
 8002c54:	08002ccb 	.word	0x08002ccb
 8002c58:	08002ccb 	.word	0x08002ccb
 8002c5c:	08002ccb 	.word	0x08002ccb
 8002c60:	08002c79 	.word	0x08002c79
 8002c64:	08002c8d 	.word	0x08002c8d
 8002c68:	4a79      	ldr	r2, [pc, #484]	; (8002e50 <HAL_GPIO_Init+0x2b4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c6e:	e02c      	b.n	8002cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	623b      	str	r3, [r7, #32]
          break;
 8002c76:	e029      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	623b      	str	r3, [r7, #32]
          break;
 8002c80:	e024      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	3308      	adds	r3, #8
 8002c88:	623b      	str	r3, [r7, #32]
          break;
 8002c8a:	e01f      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	330c      	adds	r3, #12
 8002c92:	623b      	str	r3, [r7, #32]
          break;
 8002c94:	e01a      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	623b      	str	r3, [r7, #32]
          break;
 8002ca2:	e013      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cac:	2308      	movs	r3, #8
 8002cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	611a      	str	r2, [r3, #16]
          break;
 8002cb6:	e009      	b.n	8002ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	615a      	str	r2, [r3, #20]
          break;
 8002cc2:	e003      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          break;
 8002cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d801      	bhi.n	8002cd6 <HAL_GPIO_Init+0x13a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	e001      	b.n	8002cda <HAL_GPIO_Init+0x13e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2bff      	cmp	r3, #255	; 0xff
 8002ce0:	d802      	bhi.n	8002ce8 <HAL_GPIO_Init+0x14c>
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	e002      	b.n	8002cee <HAL_GPIO_Init+0x152>
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	3b08      	subs	r3, #8
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	210f      	movs	r1, #15
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80b1 	beq.w	8002e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d34:	4a48      	ldr	r2, [pc, #288]	; (8002e58 <HAL_GPIO_Init+0x2bc>)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <HAL_GPIO_Init+0x2c0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d013      	beq.n	8002d88 <HAL_GPIO_Init+0x1ec>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3f      	ldr	r2, [pc, #252]	; (8002e60 <HAL_GPIO_Init+0x2c4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00d      	beq.n	8002d84 <HAL_GPIO_Init+0x1e8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <HAL_GPIO_Init+0x2c8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <HAL_GPIO_Init+0x1e4>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <HAL_GPIO_Init+0x2cc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_GPIO_Init+0x1e0>
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e006      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e004      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e002      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	f002 0203 	and.w	r2, r2, #3
 8002d90:	0092      	lsls	r2, r2, #2
 8002d92:	4093      	lsls	r3, r2
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d9a:	492f      	ldr	r1, [pc, #188]	; (8002e58 <HAL_GPIO_Init+0x2bc>)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	492c      	ldr	r1, [pc, #176]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4928      	ldr	r1, [pc, #160]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4922      	ldr	r1, [pc, #136]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	e006      	b.n	8002df8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	491e      	ldr	r1, [pc, #120]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4918      	ldr	r1, [pc, #96]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4914      	ldr	r1, [pc, #80]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d021      	beq.n	8002e70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
 8002e38:	e021      	b.n	8002e7e <HAL_GPIO_Init+0x2e2>
 8002e3a:	bf00      	nop
 8002e3c:	10320000 	.word	0x10320000
 8002e40:	10310000 	.word	0x10310000
 8002e44:	10220000 	.word	0x10220000
 8002e48:	10210000 	.word	0x10210000
 8002e4c:	10120000 	.word	0x10120000
 8002e50:	10110000 	.word	0x10110000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40010800 	.word	0x40010800
 8002e60:	40010c00 	.word	0x40010c00
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40011400 	.word	0x40011400
 8002e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	4909      	ldr	r1, [pc, #36]	; (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	3301      	adds	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f47f ae8e 	bne.w	8002bb0 <HAL_GPIO_Init+0x14>
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	372c      	adds	r7, #44	; 0x2c
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
 8002ec0:	e001      	b.n	8002ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	807b      	strh	r3, [r7, #2]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee2:	787b      	ldrb	r3, [r7, #1]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee8:	887a      	ldrh	r2, [r7, #2]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eee:	e003      	b.n	8002ef8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	041a      	lsls	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	611a      	str	r2, [r3, #16]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e272      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8087 	beq.w	8003032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f24:	4b92      	ldr	r3, [pc, #584]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d00c      	beq.n	8002f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f30:	4b8f      	ldr	r3, [pc, #572]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06c      	beq.n	8003030 <HAL_RCC_OscConfig+0x12c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d168      	bne.n	8003030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e24c      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x76>
 8002f6c:	4b80      	ldr	r3, [pc, #512]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a7f      	ldr	r2, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e02e      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7a      	ldr	r2, [pc, #488]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b78      	ldr	r3, [pc, #480]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xbc>
 8002fa6:	4b72      	ldr	r3, [pc, #456]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a71      	ldr	r2, [pc, #452]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6e      	ldr	r2, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002fc0:	4b6b      	ldr	r3, [pc, #428]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a67      	ldr	r2, [pc, #412]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe ff98 	bl	8001f14 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe ff94 	bl	8001f14 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e200      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe4>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe ff84 	bl	8001f14 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe ff80 	bl	8001f14 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1ec      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x10c>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800304a:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x18c>
 8003056:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x176>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1c0      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4939      	ldr	r1, [pc, #228]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x270>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe ff39 	bl	8001f14 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fe ff35 	bl	8001f14 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1a1      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4927      	ldr	r1, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCC_OscConfig+0x270>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe ff18 	bl	8001f14 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe ff14 	bl	8001f14 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e180      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03a      	beq.n	8003188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d019      	beq.n	800314e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_RCC_OscConfig+0x274>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fe fef8 	bl	8001f14 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7fe fef4 	bl	8001f14 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e160      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003146:	2001      	movs	r0, #1
 8003148:	f000 fad8 	bl	80036fc <RCC_Delay>
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_OscConfig+0x274>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003154:	f7fe fede 	bl	8001f14 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315a:	e00f      	b.n	800317c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315c:	f7fe feda 	bl	8001f14 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d908      	bls.n	800317c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e146      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	42420000 	.word	0x42420000
 8003178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	4b92      	ldr	r3, [pc, #584]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e9      	bne.n	800315c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a6 	beq.w	80032e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319a:	4b8b      	ldr	r3, [pc, #556]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a87      	ldr	r2, [pc, #540]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]
 80031b2:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b7f      	ldr	r3, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7e      	ldr	r2, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe fe9b 	bl	8001f14 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe fe97 	bl	8001f14 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e103      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b75      	ldr	r3, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x312>
 8003208:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a6e      	ldr	r2, [pc, #440]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e02d      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x334>
 800321e:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6213      	str	r3, [r2, #32]
 800322a:	4b67      	ldr	r3, [pc, #412]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a66      	ldr	r2, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	e01c      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x356>
 8003240:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4a60      	ldr	r2, [pc, #384]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	4b5e      	ldr	r3, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a5d      	ldr	r2, [pc, #372]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	e00b      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 800325a:	4b5b      	ldr	r3, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4a5a      	ldr	r2, [pc, #360]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6213      	str	r3, [r2, #32]
 8003266:	4b58      	ldr	r3, [pc, #352]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d015      	beq.n	80032a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fe fe4b 	bl	8001f14 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe fe47 	bl	8001f14 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0b1      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	4b4b      	ldr	r3, [pc, #300]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ee      	beq.n	8003282 <HAL_RCC_OscConfig+0x37e>
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7fe fe35 	bl	8001f14 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe fe31 	bl	8001f14 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e09b      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b3c      	ldr	r3, [pc, #240]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a3b      	ldr	r2, [pc, #236]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8087 	beq.w	80033fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d061      	beq.n	80033bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d146      	bne.n	800338e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe fe05 	bl	8001f14 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7fe fe01 	bl	8001f14 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e06d      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d108      	bne.n	8003348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003336:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	4921      	ldr	r1, [pc, #132]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a19      	ldr	r1, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	430b      	orrs	r3, r1
 800335a:	491b      	ldr	r1, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fdd5 	bl	8001f14 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fdd1 	bl	8001f14 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e03d      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x46a>
 800338c:	e035      	b.n	80033fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fdbe 	bl	8001f14 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fdba 	bl	8001f14 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e026      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x498>
 80033ba:	e01e      	b.n	80033fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e019      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x500>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0d0      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b67      	ldr	r3, [pc, #412]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	4965      	ldr	r1, [pc, #404]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0b8      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800346e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	494d      	ldr	r1, [pc, #308]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d040      	beq.n	8003528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d115      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07f      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e073      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4936      	ldr	r1, [pc, #216]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f8:	f7fe fd0c 	bl	8001f14 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe fd08 	bl	8001f14 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e053      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d210      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0207 	bic.w	r2, r3, #7
 800353e:	4922      	ldr	r1, [pc, #136]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e032      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4916      	ldr	r1, [pc, #88]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	490e      	ldr	r1, [pc, #56]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003596:	f000 f821 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490a      	ldr	r1, [pc, #40]	; (80035d0 <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1cc>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1d0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fc6a 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40022000 	.word	0x40022000
 80035cc:	40021000 	.word	0x40021000
 80035d0:	080059e4 	.word	0x080059e4
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000004 	.word	0x20000004

080035dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035dc:	b490      	push	{r4, r7}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCC_GetSysClockFreq+0xac>)
 80035e4:	1d3c      	adds	r4, r7, #4
 80035e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035ec:	f240 2301 	movw	r3, #513	; 0x201
 80035f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003606:	4b21      	ldr	r3, [pc, #132]	; (800368c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b04      	cmp	r3, #4
 8003614:	d002      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x40>
 8003616:	2b08      	cmp	r3, #8
 8003618:	d003      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x46>
 800361a:	e02b      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb4>)
 800361e:	623b      	str	r3, [r7, #32]
      break;
 8003620:	e02b      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	0c9b      	lsrs	r3, r3, #18
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3328      	adds	r3, #40	; 0x28
 800362c:	443b      	add	r3, r7
 800362e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003632:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	0c5b      	lsrs	r3, r3, #17
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	3328      	adds	r3, #40	; 0x28
 800364a:	443b      	add	r3, r7
 800364c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003650:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003656:	fb03 f202 	mul.w	r2, r3, r2
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	e004      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	623b      	str	r3, [r7, #32]
      break;
 8003672:	e002      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003676:	623b      	str	r3, [r7, #32]
      break;
 8003678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367a:	6a3b      	ldr	r3, [r7, #32]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc90      	pop	{r4, r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	080059c4 	.word	0x080059c4
 800368c:	40021000 	.word	0x40021000
 8003690:	007a1200 	.word	0x007a1200
 8003694:	003d0900 	.word	0x003d0900

08003698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800369c:	4b02      	ldr	r3, [pc, #8]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	20000000 	.word	0x20000000

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b0:	f7ff fff2 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000
 80036d0:	080059f4 	.word	0x080059f4

080036d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d8:	f7ff ffde 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	0adb      	lsrs	r3, r3, #11
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	080059f4 	.word	0x080059f4

080036fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <RCC_Delay+0x34>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <RCC_Delay+0x38>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0a5b      	lsrs	r3, r3, #9
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003718:	bf00      	nop
  }
  while (Delay --);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	60fa      	str	r2, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f9      	bne.n	8003718 <RCC_Delay+0x1c>
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	20000000 	.word	0x20000000
 8003734:	10624dd3 	.word	0x10624dd3

08003738 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d07d      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10d      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003764:	4b4c      	ldr	r3, [pc, #304]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	4a4b      	ldr	r2, [pc, #300]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376e:	61d3      	str	r3, [r2, #28]
 8003770:	4b49      	ldr	r3, [pc, #292]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	4b46      	ldr	r3, [pc, #280]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d118      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a42      	ldr	r2, [pc, #264]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003798:	f7fe fbbc 	bl	8001f14 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	e008      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe fbb8 	bl	8001f14 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e06d      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b3a      	ldr	r3, [pc, #232]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d02e      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d027      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037dc:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037e6:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ec:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037f2:	4a29      	ldr	r2, [pc, #164]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d014      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fb87 	bl	8001f14 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fe fb83 	bl	8001f14 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e036      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ee      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4917      	ldr	r1, [pc, #92]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	4313      	orrs	r3, r2
 800383c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003844:	4b14      	ldr	r3, [pc, #80]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	4a13      	ldr	r2, [pc, #76]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800384e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	490b      	ldr	r1, [pc, #44]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4904      	ldr	r1, [pc, #16]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	40007000 	.word	0x40007000
 80038a0:	42420440 	.word	0x42420440

080038a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b08d      	sub	sp, #52	; 0x34
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038ac:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80038ae:	f107 040c 	add.w	r4, r7, #12
 80038b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038b8:	f240 2301 	movw	r3, #513	; 0x201
 80038bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	2300      	movs	r3, #0
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c6:	2300      	movs	r3, #0
 80038c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	2300      	movs	r3, #0
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b10      	cmp	r3, #16
 80038dc:	f200 808e 	bhi.w	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d049      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d079      	beq.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80038ec:	e086      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80038ee:	4b49      	ldr	r3, [pc, #292]	; (8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80038f4:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d07f      	beq.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	0c9b      	lsrs	r3, r3, #18
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	3330      	adds	r3, #48	; 0x30
 800390a:	443b      	add	r3, r7
 800390c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003910:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d017      	beq.n	800394c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800391c:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0c5b      	lsrs	r3, r3, #17
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	3330      	adds	r3, #48	; 0x30
 8003928:	443b      	add	r3, r7
 800392a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800393a:	4a37      	ldr	r2, [pc, #220]	; (8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800394a:	e004      	b.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	4a33      	ldr	r2, [pc, #204]	; (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003956:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003962:	d102      	bne.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003968:	e04a      	b.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003978:	e042      	b.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800397a:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398a:	d108      	bne.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
 800399c:	e01f      	b.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a8:	d109      	bne.n	80039be <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80039b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c8:	d11c      	bne.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80039d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039dc:	e012      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80039de:	e011      	b.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80039e0:	f7ff fe78 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	0b9b      	lsrs	r3, r3, #14
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	3301      	adds	r3, #1
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039fa:	e004      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80039fc:	bf00      	nop
 80039fe:	e002      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a00:	bf00      	nop
 8003a02:	e000      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003a04:	bf00      	nop
    }
  }
  return (frequency);
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3734      	adds	r7, #52	; 0x34
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd90      	pop	{r4, r7, pc}
 8003a10:	080059d4 	.word	0x080059d4
 8003a14:	40021000 	.word	0x40021000
 8003a18:	007a1200 	.word	0x007a1200
 8003a1c:	003d0900 	.word	0x003d0900
 8003a20:	aaaaaaab 	.word	0xaaaaaaab

08003a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e041      	b.n	8003aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe f8d8 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f000 faaa 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e041      	b.n	8003b58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f839 	bl	8003b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f000 fa5b 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_TIM_PWM_Start+0x24>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e022      	b.n	8003bde <HAL_TIM_PWM_Start+0x6a>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d109      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x3e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	bf14      	ite	ne
 8003baa:	2301      	movne	r3, #1
 8003bac:	2300      	moveq	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	e015      	b.n	8003bde <HAL_TIM_PWM_Start+0x6a>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d109      	bne.n	8003bcc <HAL_TIM_PWM_Start+0x58>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e008      	b.n	8003bde <HAL_TIM_PWM_Start+0x6a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	bf14      	ite	ne
 8003bd8:	2301      	movne	r3, #1
 8003bda:	2300      	moveq	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e05e      	b.n	8003ca4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <HAL_TIM_PWM_Start+0x82>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf4:	e013      	b.n	8003c1e <HAL_TIM_PWM_Start+0xaa>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d104      	bne.n	8003c06 <HAL_TIM_PWM_Start+0x92>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c04:	e00b      	b.n	8003c1e <HAL_TIM_PWM_Start+0xaa>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d104      	bne.n	8003c16 <HAL_TIM_PWM_Start+0xa2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c14:	e003      	b.n	8003c1e <HAL_TIM_PWM_Start+0xaa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2201      	movs	r2, #1
 8003c24:	6839      	ldr	r1, [r7, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fc48 	bl	80044bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <HAL_TIM_PWM_Start+0x138>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d107      	bne.n	8003c46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_TIM_PWM_Start+0x138>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_TIM_PWM_Start+0xfa>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d009      	beq.n	8003c6e <HAL_TIM_PWM_Start+0xfa>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <HAL_TIM_PWM_Start+0x13c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIM_PWM_Start+0xfa>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <HAL_TIM_PWM_Start+0x140>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d111      	bne.n	8003c92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d010      	beq.n	8003ca2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c90:	e007      	b.n	8003ca2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800

08003cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0ac      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	f200 809f 	bhi.w	8003e20 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d1d 	.word	0x08003d1d
 8003cec:	08003e21 	.word	0x08003e21
 8003cf0:	08003e21 	.word	0x08003e21
 8003cf4:	08003e21 	.word	0x08003e21
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003e21 	.word	0x08003e21
 8003d00:	08003e21 	.word	0x08003e21
 8003d04:	08003e21 	.word	0x08003e21
 8003d08:	08003d9f 	.word	0x08003d9f
 8003d0c:	08003e21 	.word	0x08003e21
 8003d10:	08003e21 	.word	0x08003e21
 8003d14:	08003e21 	.word	0x08003e21
 8003d18:	08003ddf 	.word	0x08003ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f9ac 	bl	8004080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0208 	orr.w	r2, r2, #8
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	619a      	str	r2, [r3, #24]
      break;
 8003d5a:	e062      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f9f2 	bl	800414c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6999      	ldr	r1, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	619a      	str	r2, [r3, #24]
      break;
 8003d9c:	e041      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fa3b 	bl	8004220 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0208 	orr.w	r2, r2, #8
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0204 	bic.w	r2, r2, #4
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
      break;
 8003ddc:	e021      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fa85 	bl	80042f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	61da      	str	r2, [r3, #28]
      break;
 8003e1e:	e000      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_TIM_ConfigClockSource+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e0b3      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x180>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e84:	d03e      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0xd0>
 8003e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8a:	f200 8087 	bhi.w	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	f000 8085 	beq.w	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9a:	d87f      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003e9c:	2b70      	cmp	r3, #112	; 0x70
 8003e9e:	d01a      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0xa2>
 8003ea0:	2b70      	cmp	r3, #112	; 0x70
 8003ea2:	d87b      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003ea4:	2b60      	cmp	r3, #96	; 0x60
 8003ea6:	d050      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x116>
 8003ea8:	2b60      	cmp	r3, #96	; 0x60
 8003eaa:	d877      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003eac:	2b50      	cmp	r3, #80	; 0x50
 8003eae:	d03c      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0xf6>
 8003eb0:	2b50      	cmp	r3, #80	; 0x50
 8003eb2:	d873      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d058      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x136>
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d86f      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003ebc:	2b30      	cmp	r3, #48	; 0x30
 8003ebe:	d064      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x156>
 8003ec0:	2b30      	cmp	r3, #48	; 0x30
 8003ec2:	d86b      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d060      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x156>
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d867      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d05c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x156>
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d05a      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ed4:	e062      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6899      	ldr	r1, [r3, #8]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f000 faca 	bl	800447e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ef8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
      break;
 8003f02:	e04e      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6899      	ldr	r1, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f000 fab3 	bl	800447e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f26:	609a      	str	r2, [r3, #8]
      break;
 8003f28:	e03b      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 fa2a 	bl	8004390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2150      	movs	r1, #80	; 0x50
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fa81 	bl	800444a <TIM_ITRx_SetConfig>
      break;
 8003f48:	e02b      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f000 fa48 	bl	80043ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2160      	movs	r1, #96	; 0x60
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fa71 	bl	800444a <TIM_ITRx_SetConfig>
      break;
 8003f68:	e01b      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f000 fa0a 	bl	8004390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fa61 	bl	800444a <TIM_ITRx_SetConfig>
      break;
 8003f88:	e00b      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f000 fa58 	bl	800444a <TIM_ITRx_SetConfig>
        break;
 8003f9a:	e002      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f9c:	bf00      	nop
 8003f9e:	e000      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a29      	ldr	r2, [pc, #164]	; (8004074 <TIM_Base_SetConfig+0xb8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <TIM_Base_SetConfig+0x30>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fda:	d007      	beq.n	8003fec <TIM_Base_SetConfig+0x30>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a26      	ldr	r2, [pc, #152]	; (8004078 <TIM_Base_SetConfig+0xbc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0x30>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a25      	ldr	r2, [pc, #148]	; (800407c <TIM_Base_SetConfig+0xc0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d108      	bne.n	8003ffe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <TIM_Base_SetConfig+0xb8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_Base_SetConfig+0x62>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d007      	beq.n	800401e <TIM_Base_SetConfig+0x62>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <TIM_Base_SetConfig+0xbc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_Base_SetConfig+0x62>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a18      	ldr	r2, [pc, #96]	; (800407c <TIM_Base_SetConfig+0xc0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a07      	ldr	r2, [pc, #28]	; (8004074 <TIM_Base_SetConfig+0xb8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d103      	bne.n	8004064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	615a      	str	r2, [r3, #20]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800

08004080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0201 	bic.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 0302 	bic.w	r3, r3, #2
 80040c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <TIM_OC1_SetConfig+0xc8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d10c      	bne.n	80040f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0308 	bic.w	r3, r3, #8
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a13      	ldr	r2, [pc, #76]	; (8004148 <TIM_OC1_SetConfig+0xc8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d111      	bne.n	8004122 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800410c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	621a      	str	r2, [r3, #32]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00

0800414c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0210 	bic.w	r2, r3, #16
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0320 	bic.w	r3, r3, #32
 8004196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a1d      	ldr	r2, [pc, #116]	; (800421c <TIM_OC2_SetConfig+0xd0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10d      	bne.n	80041c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a14      	ldr	r2, [pc, #80]	; (800421c <TIM_OC2_SetConfig+0xd0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d113      	bne.n	80041f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00

08004220 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <TIM_OC3_SetConfig+0xd0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d10d      	bne.n	800429a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <TIM_OC3_SetConfig+0xd0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d113      	bne.n	80042ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40012c00 	.word	0x40012c00

080042f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	031b      	lsls	r3, r3, #12
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a0f      	ldr	r2, [pc, #60]	; (800438c <TIM_OC4_SetConfig+0x98>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d109      	bne.n	8004368 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00

08004390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0201 	bic.w	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 030a 	bic.w	r3, r3, #10
 80043cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f023 0210 	bic.w	r2, r3, #16
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004416:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	031b      	lsls	r3, r3, #12
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	621a      	str	r2, [r3, #32]
}
 8004440:	bf00      	nop
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	f043 0307 	orr.w	r3, r3, #7
 800446c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800447e:	b480      	push	{r7}
 8004480:	b087      	sub	sp, #28
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004498:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	021a      	lsls	r2, r3, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	609a      	str	r2, [r3, #8]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2201      	movs	r2, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	43db      	mvns	r3, r3
 80044de:	401a      	ands	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	fa01 f303 	lsl.w	r3, r1, r3
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004518:	2302      	movs	r3, #2
 800451a:	e046      	b.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d009      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a10      	ldr	r2, [pc, #64]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d10c      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4313      	orrs	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	40012c00 	.word	0x40012c00
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800

080045c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e03f      	b.n	8004652 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fd fb56 	bl	8001c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fc8f 	bl	8004f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08a      	sub	sp, #40	; 0x28
 800465e:	af02      	add	r7, sp, #8
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	d17c      	bne.n	8004774 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_UART_Transmit+0x2c>
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e075      	b.n	8004776 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_UART_Transmit+0x3e>
 8004694:	2302      	movs	r3, #2
 8004696:	e06e      	b.n	8004776 <HAL_UART_Transmit+0x11c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2221      	movs	r2, #33	; 0x21
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ae:	f7fd fc31 	bl	8001f14 <HAL_GetTick>
 80046b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	88fa      	ldrh	r2, [r7, #6]
 80046be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c8:	d108      	bne.n	80046dc <HAL_UART_Transmit+0x82>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e003      	b.n	80046e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046ec:	e02a      	b.n	8004744 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2180      	movs	r1, #128	; 0x80
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fa41 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e036      	b.n	8004776 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	3302      	adds	r3, #2
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e007      	b.n	8004736 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	3301      	adds	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1cf      	bne.n	80046ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	2140      	movs	r1, #64	; 0x40
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fa11 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e006      	b.n	8004776 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b20      	cmp	r3, #32
 8004796:	d11d      	bne.n	80047d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_UART_Receive_IT+0x26>
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e016      	b.n	80047d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Receive_IT+0x38>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e00f      	b.n	80047d6 <HAL_UART_Receive_IT+0x58>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	461a      	mov	r2, r3
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fa22 	bl	8004c14 <UART_Start_Receive_IT>
 80047d0:	4603      	mov	r3, r0
 80047d2:	e000      	b.n	80047d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_UART_IRQHandler+0x52>
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fad2 	bl	8004dd4 <UART_Receive_IT>
      return;
 8004830:	e17b      	b.n	8004b2a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80b1 	beq.w	800499c <HAL_UART_IRQHandler+0x1bc>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_UART_IRQHandler+0x70>
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80a6 	beq.w	800499c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_UART_IRQHandler+0x90>
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_UART_IRQHandler+0xb0>
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f043 0202 	orr.w	r2, r3, #2
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_UART_IRQHandler+0xd0>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f043 0204 	orr.w	r2, r3, #4
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00f      	beq.n	80048da <HAL_UART_IRQHandler+0xfa>
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <HAL_UART_IRQHandler+0xee>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f043 0208 	orr.w	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 811e 	beq.w	8004b20 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <HAL_UART_IRQHandler+0x11e>
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fa6b 	bl	8004dd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <HAL_UART_IRQHandler+0x146>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d031      	beq.n	800498a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f9ad 	bl	8004c86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d023      	beq.n	8004982 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004948:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d013      	beq.n	800497a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	4a76      	ldr	r2, [pc, #472]	; (8004b30 <HAL_UART_IRQHandler+0x350>)
 8004958:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe f8a6 	bl	8002ab0 <HAL_DMA_Abort_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004974:	4610      	mov	r0, r2
 8004976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	e00e      	b.n	8004998 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8ec 	bl	8004b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004980:	e00a      	b.n	8004998 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8e8 	bl	8004b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	e006      	b.n	8004998 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8e4 	bl	8004b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004996:	e0c3      	b.n	8004b20 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	bf00      	nop
    return;
 800499a:	e0c1      	b.n	8004b20 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f040 80a1 	bne.w	8004ae8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 809b 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8095 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d04e      	beq.n	8004a80 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80049ec:	8a3b      	ldrh	r3, [r7, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8098 	beq.w	8004b24 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049f8:	8a3a      	ldrh	r2, [r7, #16]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	f080 8092 	bcs.w	8004b24 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8a3a      	ldrh	r2, [r7, #16]
 8004a04:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d02b      	beq.n	8004a68 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a1e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0210 	bic.w	r2, r2, #16
 8004a5c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fd ffe9 	bl	8002a3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f876 	bl	8004b6a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a7e:	e051      	b.n	8004b24 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d047      	beq.n	8004b28 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004a98:	8a7b      	ldrh	r3, [r7, #18]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d044      	beq.n	8004b28 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004aac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695a      	ldr	r2, [r3, #20]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0210 	bic.w	r2, r2, #16
 8004ada:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004adc:	8a7b      	ldrh	r3, [r7, #18]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f842 	bl	8004b6a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ae6:	e01f      	b.n	8004b28 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <HAL_UART_IRQHandler+0x324>
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f902 	bl	8004d06 <UART_Transmit_IT>
    return;
 8004b02:	e012      	b.n	8004b2a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00d      	beq.n	8004b2a <HAL_UART_IRQHandler+0x34a>
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f943 	bl	8004da4 <UART_EndTransmit_IT>
    return;
 8004b1e:	e004      	b.n	8004b2a <HAL_UART_IRQHandler+0x34a>
    return;
 8004b20:	bf00      	nop
 8004b22:	e002      	b.n	8004b2a <HAL_UART_IRQHandler+0x34a>
      return;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <HAL_UART_IRQHandler+0x34a>
      return;
 8004b28:	bf00      	nop
  }
}
 8004b2a:	3728      	adds	r7, #40	; 0x28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	08004cdf 	.word	0x08004cdf

08004b34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b90:	e02c      	b.n	8004bec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d028      	beq.n	8004bec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba0:	f7fd f9b8 	bl	8001f14 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d21d      	bcs.n	8004bec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bbe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e00f      	b.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2301      	moveq	r3, #1
 8004bfe:	2300      	movne	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d0c3      	beq.n	8004b92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2222      	movs	r2, #34	; 0x22
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c58:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0220 	orr.w	r2, r2, #32
 8004c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c9c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d107      	bne.n	8004cc6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0210 	bic.w	r2, r2, #16
 8004cc4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff ff2d 	bl	8004b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b21      	cmp	r3, #33	; 0x21
 8004d18:	d13e      	bne.n	8004d98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	d114      	bne.n	8004d4e <UART_Transmit_IT+0x48>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d110      	bne.n	8004d4e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	1c9a      	adds	r2, r3, #2
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	621a      	str	r2, [r3, #32]
 8004d4c:	e008      	b.n	8004d60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6211      	str	r1, [r2, #32]
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10f      	bne.n	8004d94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
  }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff feb5 	bl	8004b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b22      	cmp	r3, #34	; 0x22
 8004de6:	f040 8099 	bne.w	8004f1c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d117      	bne.n	8004e24 <UART_Receive_IT+0x50>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d113      	bne.n	8004e24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
 8004e22:	e026      	b.n	8004e72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e36:	d007      	beq.n	8004e48 <UART_Receive_IT+0x74>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <UART_Receive_IT+0x82>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e008      	b.n	8004e68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d148      	bne.n	8004f18 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0220 	bic.w	r2, r2, #32
 8004e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d123      	bne.n	8004f0e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0210 	bic.w	r2, r2, #16
 8004eda:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d10a      	bne.n	8004f00 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fe2f 	bl	8004b6a <HAL_UARTEx_RxEventCallback>
 8004f0c:	e002      	b.n	8004f14 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fe19 	bl	8004b46 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e002      	b.n	8004f1e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f62:	f023 030c 	bic.w	r3, r3, #12
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	; (800503c <UART_SetConfig+0x114>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d103      	bne.n	8004f98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f90:	f7fe fba0 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	e002      	b.n	8004f9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f98:	f7fe fb88 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8004f9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009a      	lsls	r2, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <UART_SetConfig+0x118>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	0119      	lsls	r1, r3, #4
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009a      	lsls	r2, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <UART_SetConfig+0x118>)
 8004fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2064      	movs	r0, #100	; 0x64
 8004fde:	fb00 f303 	mul.w	r3, r0, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	3332      	adds	r3, #50	; 0x32
 8004fe8:	4a15      	ldr	r2, [pc, #84]	; (8005040 <UART_SetConfig+0x118>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ff4:	4419      	add	r1, r3
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009a      	lsls	r2, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	fbb2 f2f3 	udiv	r2, r2, r3
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <UART_SetConfig+0x118>)
 800500e:	fba3 0302 	umull	r0, r3, r3, r2
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2064      	movs	r0, #100	; 0x64
 8005016:	fb00 f303 	mul.w	r3, r0, r3
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	3332      	adds	r3, #50	; 0x32
 8005020:	4a07      	ldr	r2, [pc, #28]	; (8005040 <UART_SetConfig+0x118>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	440a      	add	r2, r1
 8005032:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40013800 	.word	0x40013800
 8005040:	51eb851f 	.word	0x51eb851f

08005044 <__errno>:
 8005044:	4b01      	ldr	r3, [pc, #4]	; (800504c <__errno+0x8>)
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	2000000c 	.word	0x2000000c

08005050 <__libc_init_array>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	2600      	movs	r6, #0
 8005054:	4d0c      	ldr	r5, [pc, #48]	; (8005088 <__libc_init_array+0x38>)
 8005056:	4c0d      	ldr	r4, [pc, #52]	; (800508c <__libc_init_array+0x3c>)
 8005058:	1b64      	subs	r4, r4, r5
 800505a:	10a4      	asrs	r4, r4, #2
 800505c:	42a6      	cmp	r6, r4
 800505e:	d109      	bne.n	8005074 <__libc_init_array+0x24>
 8005060:	f000 fc9c 	bl	800599c <_init>
 8005064:	2600      	movs	r6, #0
 8005066:	4d0a      	ldr	r5, [pc, #40]	; (8005090 <__libc_init_array+0x40>)
 8005068:	4c0a      	ldr	r4, [pc, #40]	; (8005094 <__libc_init_array+0x44>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	42a6      	cmp	r6, r4
 8005070:	d105      	bne.n	800507e <__libc_init_array+0x2e>
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	f855 3b04 	ldr.w	r3, [r5], #4
 8005078:	4798      	blx	r3
 800507a:	3601      	adds	r6, #1
 800507c:	e7ee      	b.n	800505c <__libc_init_array+0xc>
 800507e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005082:	4798      	blx	r3
 8005084:	3601      	adds	r6, #1
 8005086:	e7f2      	b.n	800506e <__libc_init_array+0x1e>
 8005088:	08005a30 	.word	0x08005a30
 800508c:	08005a30 	.word	0x08005a30
 8005090:	08005a30 	.word	0x08005a30
 8005094:	08005a34 	.word	0x08005a34

08005098 <memset>:
 8005098:	4603      	mov	r3, r0
 800509a:	4402      	add	r2, r0
 800509c:	4293      	cmp	r3, r2
 800509e:	d100      	bne.n	80050a2 <memset+0xa>
 80050a0:	4770      	bx	lr
 80050a2:	f803 1b01 	strb.w	r1, [r3], #1
 80050a6:	e7f9      	b.n	800509c <memset+0x4>

080050a8 <siprintf>:
 80050a8:	b40e      	push	{r1, r2, r3}
 80050aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050ae:	b500      	push	{lr}
 80050b0:	b09c      	sub	sp, #112	; 0x70
 80050b2:	ab1d      	add	r3, sp, #116	; 0x74
 80050b4:	9002      	str	r0, [sp, #8]
 80050b6:	9006      	str	r0, [sp, #24]
 80050b8:	9107      	str	r1, [sp, #28]
 80050ba:	9104      	str	r1, [sp, #16]
 80050bc:	4808      	ldr	r0, [pc, #32]	; (80050e0 <siprintf+0x38>)
 80050be:	4909      	ldr	r1, [pc, #36]	; (80050e4 <siprintf+0x3c>)
 80050c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c4:	9105      	str	r1, [sp, #20]
 80050c6:	6800      	ldr	r0, [r0, #0]
 80050c8:	a902      	add	r1, sp, #8
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	f000 f868 	bl	80051a0 <_svfiprintf_r>
 80050d0:	2200      	movs	r2, #0
 80050d2:	9b02      	ldr	r3, [sp, #8]
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	b01c      	add	sp, #112	; 0x70
 80050d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050dc:	b003      	add	sp, #12
 80050de:	4770      	bx	lr
 80050e0:	2000000c 	.word	0x2000000c
 80050e4:	ffff0208 	.word	0xffff0208

080050e8 <__ssputs_r>:
 80050e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	688e      	ldr	r6, [r1, #8]
 80050ee:	4682      	mov	sl, r0
 80050f0:	429e      	cmp	r6, r3
 80050f2:	460c      	mov	r4, r1
 80050f4:	4690      	mov	r8, r2
 80050f6:	461f      	mov	r7, r3
 80050f8:	d838      	bhi.n	800516c <__ssputs_r+0x84>
 80050fa:	898a      	ldrh	r2, [r1, #12]
 80050fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005100:	d032      	beq.n	8005168 <__ssputs_r+0x80>
 8005102:	6825      	ldr	r5, [r4, #0]
 8005104:	6909      	ldr	r1, [r1, #16]
 8005106:	3301      	adds	r3, #1
 8005108:	eba5 0901 	sub.w	r9, r5, r1
 800510c:	6965      	ldr	r5, [r4, #20]
 800510e:	444b      	add	r3, r9
 8005110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005118:	106d      	asrs	r5, r5, #1
 800511a:	429d      	cmp	r5, r3
 800511c:	bf38      	it	cc
 800511e:	461d      	movcc	r5, r3
 8005120:	0553      	lsls	r3, r2, #21
 8005122:	d531      	bpl.n	8005188 <__ssputs_r+0xa0>
 8005124:	4629      	mov	r1, r5
 8005126:	f000 fb6f 	bl	8005808 <_malloc_r>
 800512a:	4606      	mov	r6, r0
 800512c:	b950      	cbnz	r0, 8005144 <__ssputs_r+0x5c>
 800512e:	230c      	movs	r3, #12
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	f8ca 3000 	str.w	r3, [sl]
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005144:	464a      	mov	r2, r9
 8005146:	6921      	ldr	r1, [r4, #16]
 8005148:	f000 face 	bl	80056e8 <memcpy>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	6126      	str	r6, [r4, #16]
 800515a:	444e      	add	r6, r9
 800515c:	6026      	str	r6, [r4, #0]
 800515e:	463e      	mov	r6, r7
 8005160:	6165      	str	r5, [r4, #20]
 8005162:	eba5 0509 	sub.w	r5, r5, r9
 8005166:	60a5      	str	r5, [r4, #8]
 8005168:	42be      	cmp	r6, r7
 800516a:	d900      	bls.n	800516e <__ssputs_r+0x86>
 800516c:	463e      	mov	r6, r7
 800516e:	4632      	mov	r2, r6
 8005170:	4641      	mov	r1, r8
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	f000 fac6 	bl	8005704 <memmove>
 8005178:	68a3      	ldr	r3, [r4, #8]
 800517a:	2000      	movs	r0, #0
 800517c:	1b9b      	subs	r3, r3, r6
 800517e:	60a3      	str	r3, [r4, #8]
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	4433      	add	r3, r6
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	e7db      	b.n	8005140 <__ssputs_r+0x58>
 8005188:	462a      	mov	r2, r5
 800518a:	f000 fbb1 	bl	80058f0 <_realloc_r>
 800518e:	4606      	mov	r6, r0
 8005190:	2800      	cmp	r0, #0
 8005192:	d1e1      	bne.n	8005158 <__ssputs_r+0x70>
 8005194:	4650      	mov	r0, sl
 8005196:	6921      	ldr	r1, [r4, #16]
 8005198:	f000 face 	bl	8005738 <_free_r>
 800519c:	e7c7      	b.n	800512e <__ssputs_r+0x46>
	...

080051a0 <_svfiprintf_r>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	4698      	mov	r8, r3
 80051a6:	898b      	ldrh	r3, [r1, #12]
 80051a8:	4607      	mov	r7, r0
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	460d      	mov	r5, r1
 80051ae:	4614      	mov	r4, r2
 80051b0:	b09d      	sub	sp, #116	; 0x74
 80051b2:	d50e      	bpl.n	80051d2 <_svfiprintf_r+0x32>
 80051b4:	690b      	ldr	r3, [r1, #16]
 80051b6:	b963      	cbnz	r3, 80051d2 <_svfiprintf_r+0x32>
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	f000 fb25 	bl	8005808 <_malloc_r>
 80051be:	6028      	str	r0, [r5, #0]
 80051c0:	6128      	str	r0, [r5, #16]
 80051c2:	b920      	cbnz	r0, 80051ce <_svfiprintf_r+0x2e>
 80051c4:	230c      	movs	r3, #12
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	e0d1      	b.n	8005372 <_svfiprintf_r+0x1d2>
 80051ce:	2340      	movs	r3, #64	; 0x40
 80051d0:	616b      	str	r3, [r5, #20]
 80051d2:	2300      	movs	r3, #0
 80051d4:	9309      	str	r3, [sp, #36]	; 0x24
 80051d6:	2320      	movs	r3, #32
 80051d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051dc:	2330      	movs	r3, #48	; 0x30
 80051de:	f04f 0901 	mov.w	r9, #1
 80051e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800538c <_svfiprintf_r+0x1ec>
 80051ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ee:	4623      	mov	r3, r4
 80051f0:	469a      	mov	sl, r3
 80051f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f6:	b10a      	cbz	r2, 80051fc <_svfiprintf_r+0x5c>
 80051f8:	2a25      	cmp	r2, #37	; 0x25
 80051fa:	d1f9      	bne.n	80051f0 <_svfiprintf_r+0x50>
 80051fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005200:	d00b      	beq.n	800521a <_svfiprintf_r+0x7a>
 8005202:	465b      	mov	r3, fp
 8005204:	4622      	mov	r2, r4
 8005206:	4629      	mov	r1, r5
 8005208:	4638      	mov	r0, r7
 800520a:	f7ff ff6d 	bl	80050e8 <__ssputs_r>
 800520e:	3001      	adds	r0, #1
 8005210:	f000 80aa 	beq.w	8005368 <_svfiprintf_r+0x1c8>
 8005214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005216:	445a      	add	r2, fp
 8005218:	9209      	str	r2, [sp, #36]	; 0x24
 800521a:	f89a 3000 	ldrb.w	r3, [sl]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80a2 	beq.w	8005368 <_svfiprintf_r+0x1c8>
 8005224:	2300      	movs	r3, #0
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800522e:	f10a 0a01 	add.w	sl, sl, #1
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	9307      	str	r3, [sp, #28]
 8005236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800523a:	931a      	str	r3, [sp, #104]	; 0x68
 800523c:	4654      	mov	r4, sl
 800523e:	2205      	movs	r2, #5
 8005240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005244:	4851      	ldr	r0, [pc, #324]	; (800538c <_svfiprintf_r+0x1ec>)
 8005246:	f000 fa41 	bl	80056cc <memchr>
 800524a:	9a04      	ldr	r2, [sp, #16]
 800524c:	b9d8      	cbnz	r0, 8005286 <_svfiprintf_r+0xe6>
 800524e:	06d0      	lsls	r0, r2, #27
 8005250:	bf44      	itt	mi
 8005252:	2320      	movmi	r3, #32
 8005254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005258:	0711      	lsls	r1, r2, #28
 800525a:	bf44      	itt	mi
 800525c:	232b      	movmi	r3, #43	; 0x2b
 800525e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005262:	f89a 3000 	ldrb.w	r3, [sl]
 8005266:	2b2a      	cmp	r3, #42	; 0x2a
 8005268:	d015      	beq.n	8005296 <_svfiprintf_r+0xf6>
 800526a:	4654      	mov	r4, sl
 800526c:	2000      	movs	r0, #0
 800526e:	f04f 0c0a 	mov.w	ip, #10
 8005272:	9a07      	ldr	r2, [sp, #28]
 8005274:	4621      	mov	r1, r4
 8005276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800527a:	3b30      	subs	r3, #48	; 0x30
 800527c:	2b09      	cmp	r3, #9
 800527e:	d94e      	bls.n	800531e <_svfiprintf_r+0x17e>
 8005280:	b1b0      	cbz	r0, 80052b0 <_svfiprintf_r+0x110>
 8005282:	9207      	str	r2, [sp, #28]
 8005284:	e014      	b.n	80052b0 <_svfiprintf_r+0x110>
 8005286:	eba0 0308 	sub.w	r3, r0, r8
 800528a:	fa09 f303 	lsl.w	r3, r9, r3
 800528e:	4313      	orrs	r3, r2
 8005290:	46a2      	mov	sl, r4
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	e7d2      	b.n	800523c <_svfiprintf_r+0x9c>
 8005296:	9b03      	ldr	r3, [sp, #12]
 8005298:	1d19      	adds	r1, r3, #4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	9103      	str	r1, [sp, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bfbb      	ittet	lt
 80052a2:	425b      	neglt	r3, r3
 80052a4:	f042 0202 	orrlt.w	r2, r2, #2
 80052a8:	9307      	strge	r3, [sp, #28]
 80052aa:	9307      	strlt	r3, [sp, #28]
 80052ac:	bfb8      	it	lt
 80052ae:	9204      	strlt	r2, [sp, #16]
 80052b0:	7823      	ldrb	r3, [r4, #0]
 80052b2:	2b2e      	cmp	r3, #46	; 0x2e
 80052b4:	d10c      	bne.n	80052d0 <_svfiprintf_r+0x130>
 80052b6:	7863      	ldrb	r3, [r4, #1]
 80052b8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ba:	d135      	bne.n	8005328 <_svfiprintf_r+0x188>
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	3402      	adds	r4, #2
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	9203      	str	r2, [sp, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bfb8      	it	lt
 80052ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005390 <_svfiprintf_r+0x1f0>
 80052d4:	2203      	movs	r2, #3
 80052d6:	4650      	mov	r0, sl
 80052d8:	7821      	ldrb	r1, [r4, #0]
 80052da:	f000 f9f7 	bl	80056cc <memchr>
 80052de:	b140      	cbz	r0, 80052f2 <_svfiprintf_r+0x152>
 80052e0:	2340      	movs	r3, #64	; 0x40
 80052e2:	eba0 000a 	sub.w	r0, r0, sl
 80052e6:	fa03 f000 	lsl.w	r0, r3, r0
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	3401      	adds	r4, #1
 80052ee:	4303      	orrs	r3, r0
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f6:	2206      	movs	r2, #6
 80052f8:	4826      	ldr	r0, [pc, #152]	; (8005394 <_svfiprintf_r+0x1f4>)
 80052fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052fe:	f000 f9e5 	bl	80056cc <memchr>
 8005302:	2800      	cmp	r0, #0
 8005304:	d038      	beq.n	8005378 <_svfiprintf_r+0x1d8>
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <_svfiprintf_r+0x1f8>)
 8005308:	bb1b      	cbnz	r3, 8005352 <_svfiprintf_r+0x1b2>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	3307      	adds	r3, #7
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	3308      	adds	r3, #8
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005318:	4433      	add	r3, r6
 800531a:	9309      	str	r3, [sp, #36]	; 0x24
 800531c:	e767      	b.n	80051ee <_svfiprintf_r+0x4e>
 800531e:	460c      	mov	r4, r1
 8005320:	2001      	movs	r0, #1
 8005322:	fb0c 3202 	mla	r2, ip, r2, r3
 8005326:	e7a5      	b.n	8005274 <_svfiprintf_r+0xd4>
 8005328:	2300      	movs	r3, #0
 800532a:	f04f 0c0a 	mov.w	ip, #10
 800532e:	4619      	mov	r1, r3
 8005330:	3401      	adds	r4, #1
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	4620      	mov	r0, r4
 8005336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800533a:	3a30      	subs	r2, #48	; 0x30
 800533c:	2a09      	cmp	r2, #9
 800533e:	d903      	bls.n	8005348 <_svfiprintf_r+0x1a8>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0c5      	beq.n	80052d0 <_svfiprintf_r+0x130>
 8005344:	9105      	str	r1, [sp, #20]
 8005346:	e7c3      	b.n	80052d0 <_svfiprintf_r+0x130>
 8005348:	4604      	mov	r4, r0
 800534a:	2301      	movs	r3, #1
 800534c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005350:	e7f0      	b.n	8005334 <_svfiprintf_r+0x194>
 8005352:	ab03      	add	r3, sp, #12
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462a      	mov	r2, r5
 8005358:	4638      	mov	r0, r7
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <_svfiprintf_r+0x1fc>)
 800535c:	a904      	add	r1, sp, #16
 800535e:	f3af 8000 	nop.w
 8005362:	1c42      	adds	r2, r0, #1
 8005364:	4606      	mov	r6, r0
 8005366:	d1d6      	bne.n	8005316 <_svfiprintf_r+0x176>
 8005368:	89ab      	ldrh	r3, [r5, #12]
 800536a:	065b      	lsls	r3, r3, #25
 800536c:	f53f af2c 	bmi.w	80051c8 <_svfiprintf_r+0x28>
 8005370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005372:	b01d      	add	sp, #116	; 0x74
 8005374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005378:	ab03      	add	r3, sp, #12
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	462a      	mov	r2, r5
 800537e:	4638      	mov	r0, r7
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <_svfiprintf_r+0x1fc>)
 8005382:	a904      	add	r1, sp, #16
 8005384:	f000 f87c 	bl	8005480 <_printf_i>
 8005388:	e7eb      	b.n	8005362 <_svfiprintf_r+0x1c2>
 800538a:	bf00      	nop
 800538c:	080059fc 	.word	0x080059fc
 8005390:	08005a02 	.word	0x08005a02
 8005394:	08005a06 	.word	0x08005a06
 8005398:	00000000 	.word	0x00000000
 800539c:	080050e9 	.word	0x080050e9

080053a0 <_printf_common>:
 80053a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a4:	4616      	mov	r6, r2
 80053a6:	4699      	mov	r9, r3
 80053a8:	688a      	ldr	r2, [r1, #8]
 80053aa:	690b      	ldr	r3, [r1, #16]
 80053ac:	4607      	mov	r7, r0
 80053ae:	4293      	cmp	r3, r2
 80053b0:	bfb8      	it	lt
 80053b2:	4613      	movlt	r3, r2
 80053b4:	6033      	str	r3, [r6, #0]
 80053b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053ba:	460c      	mov	r4, r1
 80053bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c0:	b10a      	cbz	r2, 80053c6 <_printf_common+0x26>
 80053c2:	3301      	adds	r3, #1
 80053c4:	6033      	str	r3, [r6, #0]
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	0699      	lsls	r1, r3, #26
 80053ca:	bf42      	ittt	mi
 80053cc:	6833      	ldrmi	r3, [r6, #0]
 80053ce:	3302      	addmi	r3, #2
 80053d0:	6033      	strmi	r3, [r6, #0]
 80053d2:	6825      	ldr	r5, [r4, #0]
 80053d4:	f015 0506 	ands.w	r5, r5, #6
 80053d8:	d106      	bne.n	80053e8 <_printf_common+0x48>
 80053da:	f104 0a19 	add.w	sl, r4, #25
 80053de:	68e3      	ldr	r3, [r4, #12]
 80053e0:	6832      	ldr	r2, [r6, #0]
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	42ab      	cmp	r3, r5
 80053e6:	dc28      	bgt.n	800543a <_printf_common+0x9a>
 80053e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053ec:	1e13      	subs	r3, r2, #0
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	bf18      	it	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	0692      	lsls	r2, r2, #26
 80053f6:	d42d      	bmi.n	8005454 <_printf_common+0xb4>
 80053f8:	4649      	mov	r1, r9
 80053fa:	4638      	mov	r0, r7
 80053fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005400:	47c0      	blx	r8
 8005402:	3001      	adds	r0, #1
 8005404:	d020      	beq.n	8005448 <_printf_common+0xa8>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	68e5      	ldr	r5, [r4, #12]
 800540a:	f003 0306 	and.w	r3, r3, #6
 800540e:	2b04      	cmp	r3, #4
 8005410:	bf18      	it	ne
 8005412:	2500      	movne	r5, #0
 8005414:	6832      	ldr	r2, [r6, #0]
 8005416:	f04f 0600 	mov.w	r6, #0
 800541a:	68a3      	ldr	r3, [r4, #8]
 800541c:	bf08      	it	eq
 800541e:	1aad      	subeq	r5, r5, r2
 8005420:	6922      	ldr	r2, [r4, #16]
 8005422:	bf08      	it	eq
 8005424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005428:	4293      	cmp	r3, r2
 800542a:	bfc4      	itt	gt
 800542c:	1a9b      	subgt	r3, r3, r2
 800542e:	18ed      	addgt	r5, r5, r3
 8005430:	341a      	adds	r4, #26
 8005432:	42b5      	cmp	r5, r6
 8005434:	d11a      	bne.n	800546c <_printf_common+0xcc>
 8005436:	2000      	movs	r0, #0
 8005438:	e008      	b.n	800544c <_printf_common+0xac>
 800543a:	2301      	movs	r3, #1
 800543c:	4652      	mov	r2, sl
 800543e:	4649      	mov	r1, r9
 8005440:	4638      	mov	r0, r7
 8005442:	47c0      	blx	r8
 8005444:	3001      	adds	r0, #1
 8005446:	d103      	bne.n	8005450 <_printf_common+0xb0>
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	3501      	adds	r5, #1
 8005452:	e7c4      	b.n	80053de <_printf_common+0x3e>
 8005454:	2030      	movs	r0, #48	; 0x30
 8005456:	18e1      	adds	r1, r4, r3
 8005458:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005462:	4422      	add	r2, r4
 8005464:	3302      	adds	r3, #2
 8005466:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800546a:	e7c5      	b.n	80053f8 <_printf_common+0x58>
 800546c:	2301      	movs	r3, #1
 800546e:	4622      	mov	r2, r4
 8005470:	4649      	mov	r1, r9
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	3001      	adds	r0, #1
 8005478:	d0e6      	beq.n	8005448 <_printf_common+0xa8>
 800547a:	3601      	adds	r6, #1
 800547c:	e7d9      	b.n	8005432 <_printf_common+0x92>
	...

08005480 <_printf_i>:
 8005480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	7e0f      	ldrb	r7, [r1, #24]
 8005486:	4691      	mov	r9, r2
 8005488:	2f78      	cmp	r7, #120	; 0x78
 800548a:	4680      	mov	r8, r0
 800548c:	460c      	mov	r4, r1
 800548e:	469a      	mov	sl, r3
 8005490:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005496:	d807      	bhi.n	80054a8 <_printf_i+0x28>
 8005498:	2f62      	cmp	r7, #98	; 0x62
 800549a:	d80a      	bhi.n	80054b2 <_printf_i+0x32>
 800549c:	2f00      	cmp	r7, #0
 800549e:	f000 80d9 	beq.w	8005654 <_printf_i+0x1d4>
 80054a2:	2f58      	cmp	r7, #88	; 0x58
 80054a4:	f000 80a4 	beq.w	80055f0 <_printf_i+0x170>
 80054a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054b0:	e03a      	b.n	8005528 <_printf_i+0xa8>
 80054b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054b6:	2b15      	cmp	r3, #21
 80054b8:	d8f6      	bhi.n	80054a8 <_printf_i+0x28>
 80054ba:	a101      	add	r1, pc, #4	; (adr r1, 80054c0 <_printf_i+0x40>)
 80054bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c0:	08005519 	.word	0x08005519
 80054c4:	0800552d 	.word	0x0800552d
 80054c8:	080054a9 	.word	0x080054a9
 80054cc:	080054a9 	.word	0x080054a9
 80054d0:	080054a9 	.word	0x080054a9
 80054d4:	080054a9 	.word	0x080054a9
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	080054a9 	.word	0x080054a9
 80054e0:	080054a9 	.word	0x080054a9
 80054e4:	080054a9 	.word	0x080054a9
 80054e8:	080054a9 	.word	0x080054a9
 80054ec:	0800563b 	.word	0x0800563b
 80054f0:	0800555d 	.word	0x0800555d
 80054f4:	0800561d 	.word	0x0800561d
 80054f8:	080054a9 	.word	0x080054a9
 80054fc:	080054a9 	.word	0x080054a9
 8005500:	0800565d 	.word	0x0800565d
 8005504:	080054a9 	.word	0x080054a9
 8005508:	0800555d 	.word	0x0800555d
 800550c:	080054a9 	.word	0x080054a9
 8005510:	080054a9 	.word	0x080054a9
 8005514:	08005625 	.word	0x08005625
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	602a      	str	r2, [r5, #0]
 8005520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005528:	2301      	movs	r3, #1
 800552a:	e0a4      	b.n	8005676 <_printf_i+0x1f6>
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	6829      	ldr	r1, [r5, #0]
 8005530:	0606      	lsls	r6, r0, #24
 8005532:	f101 0304 	add.w	r3, r1, #4
 8005536:	d50a      	bpl.n	800554e <_printf_i+0xce>
 8005538:	680e      	ldr	r6, [r1, #0]
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	2e00      	cmp	r6, #0
 800553e:	da03      	bge.n	8005548 <_printf_i+0xc8>
 8005540:	232d      	movs	r3, #45	; 0x2d
 8005542:	4276      	negs	r6, r6
 8005544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005548:	230a      	movs	r3, #10
 800554a:	485e      	ldr	r0, [pc, #376]	; (80056c4 <_printf_i+0x244>)
 800554c:	e019      	b.n	8005582 <_printf_i+0x102>
 800554e:	680e      	ldr	r6, [r1, #0]
 8005550:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	bf18      	it	ne
 8005558:	b236      	sxthne	r6, r6
 800555a:	e7ef      	b.n	800553c <_printf_i+0xbc>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	6820      	ldr	r0, [r4, #0]
 8005560:	1d19      	adds	r1, r3, #4
 8005562:	6029      	str	r1, [r5, #0]
 8005564:	0601      	lsls	r1, r0, #24
 8005566:	d501      	bpl.n	800556c <_printf_i+0xec>
 8005568:	681e      	ldr	r6, [r3, #0]
 800556a:	e002      	b.n	8005572 <_printf_i+0xf2>
 800556c:	0646      	lsls	r6, r0, #25
 800556e:	d5fb      	bpl.n	8005568 <_printf_i+0xe8>
 8005570:	881e      	ldrh	r6, [r3, #0]
 8005572:	2f6f      	cmp	r7, #111	; 0x6f
 8005574:	bf0c      	ite	eq
 8005576:	2308      	moveq	r3, #8
 8005578:	230a      	movne	r3, #10
 800557a:	4852      	ldr	r0, [pc, #328]	; (80056c4 <_printf_i+0x244>)
 800557c:	2100      	movs	r1, #0
 800557e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005582:	6865      	ldr	r5, [r4, #4]
 8005584:	2d00      	cmp	r5, #0
 8005586:	bfa8      	it	ge
 8005588:	6821      	ldrge	r1, [r4, #0]
 800558a:	60a5      	str	r5, [r4, #8]
 800558c:	bfa4      	itt	ge
 800558e:	f021 0104 	bicge.w	r1, r1, #4
 8005592:	6021      	strge	r1, [r4, #0]
 8005594:	b90e      	cbnz	r6, 800559a <_printf_i+0x11a>
 8005596:	2d00      	cmp	r5, #0
 8005598:	d04d      	beq.n	8005636 <_printf_i+0x1b6>
 800559a:	4615      	mov	r5, r2
 800559c:	fbb6 f1f3 	udiv	r1, r6, r3
 80055a0:	fb03 6711 	mls	r7, r3, r1, r6
 80055a4:	5dc7      	ldrb	r7, [r0, r7]
 80055a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055aa:	4637      	mov	r7, r6
 80055ac:	42bb      	cmp	r3, r7
 80055ae:	460e      	mov	r6, r1
 80055b0:	d9f4      	bls.n	800559c <_printf_i+0x11c>
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d10b      	bne.n	80055ce <_printf_i+0x14e>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	07de      	lsls	r6, r3, #31
 80055ba:	d508      	bpl.n	80055ce <_printf_i+0x14e>
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	6861      	ldr	r1, [r4, #4]
 80055c0:	4299      	cmp	r1, r3
 80055c2:	bfde      	ittt	le
 80055c4:	2330      	movle	r3, #48	; 0x30
 80055c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055ce:	1b52      	subs	r2, r2, r5
 80055d0:	6122      	str	r2, [r4, #16]
 80055d2:	464b      	mov	r3, r9
 80055d4:	4621      	mov	r1, r4
 80055d6:	4640      	mov	r0, r8
 80055d8:	f8cd a000 	str.w	sl, [sp]
 80055dc:	aa03      	add	r2, sp, #12
 80055de:	f7ff fedf 	bl	80053a0 <_printf_common>
 80055e2:	3001      	adds	r0, #1
 80055e4:	d14c      	bne.n	8005680 <_printf_i+0x200>
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ea:	b004      	add	sp, #16
 80055ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f0:	4834      	ldr	r0, [pc, #208]	; (80056c4 <_printf_i+0x244>)
 80055f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055f6:	6829      	ldr	r1, [r5, #0]
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80055fe:	6029      	str	r1, [r5, #0]
 8005600:	061d      	lsls	r5, r3, #24
 8005602:	d514      	bpl.n	800562e <_printf_i+0x1ae>
 8005604:	07df      	lsls	r7, r3, #31
 8005606:	bf44      	itt	mi
 8005608:	f043 0320 	orrmi.w	r3, r3, #32
 800560c:	6023      	strmi	r3, [r4, #0]
 800560e:	b91e      	cbnz	r6, 8005618 <_printf_i+0x198>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	f023 0320 	bic.w	r3, r3, #32
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	2310      	movs	r3, #16
 800561a:	e7af      	b.n	800557c <_printf_i+0xfc>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	f043 0320 	orr.w	r3, r3, #32
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	2378      	movs	r3, #120	; 0x78
 8005626:	4828      	ldr	r0, [pc, #160]	; (80056c8 <_printf_i+0x248>)
 8005628:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800562c:	e7e3      	b.n	80055f6 <_printf_i+0x176>
 800562e:	0659      	lsls	r1, r3, #25
 8005630:	bf48      	it	mi
 8005632:	b2b6      	uxthmi	r6, r6
 8005634:	e7e6      	b.n	8005604 <_printf_i+0x184>
 8005636:	4615      	mov	r5, r2
 8005638:	e7bb      	b.n	80055b2 <_printf_i+0x132>
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	6826      	ldr	r6, [r4, #0]
 800563e:	1d18      	adds	r0, r3, #4
 8005640:	6961      	ldr	r1, [r4, #20]
 8005642:	6028      	str	r0, [r5, #0]
 8005644:	0635      	lsls	r5, r6, #24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	d501      	bpl.n	800564e <_printf_i+0x1ce>
 800564a:	6019      	str	r1, [r3, #0]
 800564c:	e002      	b.n	8005654 <_printf_i+0x1d4>
 800564e:	0670      	lsls	r0, r6, #25
 8005650:	d5fb      	bpl.n	800564a <_printf_i+0x1ca>
 8005652:	8019      	strh	r1, [r3, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	4615      	mov	r5, r2
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	e7ba      	b.n	80055d2 <_printf_i+0x152>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	2100      	movs	r1, #0
 8005660:	1d1a      	adds	r2, r3, #4
 8005662:	602a      	str	r2, [r5, #0]
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	6862      	ldr	r2, [r4, #4]
 8005668:	4628      	mov	r0, r5
 800566a:	f000 f82f 	bl	80056cc <memchr>
 800566e:	b108      	cbz	r0, 8005674 <_printf_i+0x1f4>
 8005670:	1b40      	subs	r0, r0, r5
 8005672:	6060      	str	r0, [r4, #4]
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	6123      	str	r3, [r4, #16]
 8005678:	2300      	movs	r3, #0
 800567a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567e:	e7a8      	b.n	80055d2 <_printf_i+0x152>
 8005680:	462a      	mov	r2, r5
 8005682:	4649      	mov	r1, r9
 8005684:	4640      	mov	r0, r8
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	47d0      	blx	sl
 800568a:	3001      	adds	r0, #1
 800568c:	d0ab      	beq.n	80055e6 <_printf_i+0x166>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	079b      	lsls	r3, r3, #30
 8005692:	d413      	bmi.n	80056bc <_printf_i+0x23c>
 8005694:	68e0      	ldr	r0, [r4, #12]
 8005696:	9b03      	ldr	r3, [sp, #12]
 8005698:	4298      	cmp	r0, r3
 800569a:	bfb8      	it	lt
 800569c:	4618      	movlt	r0, r3
 800569e:	e7a4      	b.n	80055ea <_printf_i+0x16a>
 80056a0:	2301      	movs	r3, #1
 80056a2:	4632      	mov	r2, r6
 80056a4:	4649      	mov	r1, r9
 80056a6:	4640      	mov	r0, r8
 80056a8:	47d0      	blx	sl
 80056aa:	3001      	adds	r0, #1
 80056ac:	d09b      	beq.n	80055e6 <_printf_i+0x166>
 80056ae:	3501      	adds	r5, #1
 80056b0:	68e3      	ldr	r3, [r4, #12]
 80056b2:	9903      	ldr	r1, [sp, #12]
 80056b4:	1a5b      	subs	r3, r3, r1
 80056b6:	42ab      	cmp	r3, r5
 80056b8:	dcf2      	bgt.n	80056a0 <_printf_i+0x220>
 80056ba:	e7eb      	b.n	8005694 <_printf_i+0x214>
 80056bc:	2500      	movs	r5, #0
 80056be:	f104 0619 	add.w	r6, r4, #25
 80056c2:	e7f5      	b.n	80056b0 <_printf_i+0x230>
 80056c4:	08005a0d 	.word	0x08005a0d
 80056c8:	08005a1e 	.word	0x08005a1e

080056cc <memchr>:
 80056cc:	4603      	mov	r3, r0
 80056ce:	b510      	push	{r4, lr}
 80056d0:	b2c9      	uxtb	r1, r1
 80056d2:	4402      	add	r2, r0
 80056d4:	4293      	cmp	r3, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	d101      	bne.n	80056de <memchr+0x12>
 80056da:	2000      	movs	r0, #0
 80056dc:	e003      	b.n	80056e6 <memchr+0x1a>
 80056de:	7804      	ldrb	r4, [r0, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	428c      	cmp	r4, r1
 80056e4:	d1f6      	bne.n	80056d4 <memchr+0x8>
 80056e6:	bd10      	pop	{r4, pc}

080056e8 <memcpy>:
 80056e8:	440a      	add	r2, r1
 80056ea:	4291      	cmp	r1, r2
 80056ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80056f0:	d100      	bne.n	80056f4 <memcpy+0xc>
 80056f2:	4770      	bx	lr
 80056f4:	b510      	push	{r4, lr}
 80056f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056fa:	4291      	cmp	r1, r2
 80056fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005700:	d1f9      	bne.n	80056f6 <memcpy+0xe>
 8005702:	bd10      	pop	{r4, pc}

08005704 <memmove>:
 8005704:	4288      	cmp	r0, r1
 8005706:	b510      	push	{r4, lr}
 8005708:	eb01 0402 	add.w	r4, r1, r2
 800570c:	d902      	bls.n	8005714 <memmove+0x10>
 800570e:	4284      	cmp	r4, r0
 8005710:	4623      	mov	r3, r4
 8005712:	d807      	bhi.n	8005724 <memmove+0x20>
 8005714:	1e43      	subs	r3, r0, #1
 8005716:	42a1      	cmp	r1, r4
 8005718:	d008      	beq.n	800572c <memmove+0x28>
 800571a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800571e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005722:	e7f8      	b.n	8005716 <memmove+0x12>
 8005724:	4601      	mov	r1, r0
 8005726:	4402      	add	r2, r0
 8005728:	428a      	cmp	r2, r1
 800572a:	d100      	bne.n	800572e <memmove+0x2a>
 800572c:	bd10      	pop	{r4, pc}
 800572e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005736:	e7f7      	b.n	8005728 <memmove+0x24>

08005738 <_free_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	2900      	cmp	r1, #0
 800573e:	d040      	beq.n	80057c2 <_free_r+0x8a>
 8005740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005744:	1f0c      	subs	r4, r1, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfb8      	it	lt
 800574a:	18e4      	addlt	r4, r4, r3
 800574c:	f000 f910 	bl	8005970 <__malloc_lock>
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <_free_r+0x8c>)
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	b933      	cbnz	r3, 8005764 <_free_r+0x2c>
 8005756:	6063      	str	r3, [r4, #4]
 8005758:	6014      	str	r4, [r2, #0]
 800575a:	4628      	mov	r0, r5
 800575c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005760:	f000 b90c 	b.w	800597c <__malloc_unlock>
 8005764:	42a3      	cmp	r3, r4
 8005766:	d908      	bls.n	800577a <_free_r+0x42>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	1821      	adds	r1, r4, r0
 800576c:	428b      	cmp	r3, r1
 800576e:	bf01      	itttt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	1809      	addeq	r1, r1, r0
 8005776:	6021      	streq	r1, [r4, #0]
 8005778:	e7ed      	b.n	8005756 <_free_r+0x1e>
 800577a:	461a      	mov	r2, r3
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b10b      	cbz	r3, 8005784 <_free_r+0x4c>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d9fa      	bls.n	800577a <_free_r+0x42>
 8005784:	6811      	ldr	r1, [r2, #0]
 8005786:	1850      	adds	r0, r2, r1
 8005788:	42a0      	cmp	r0, r4
 800578a:	d10b      	bne.n	80057a4 <_free_r+0x6c>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	4401      	add	r1, r0
 8005790:	1850      	adds	r0, r2, r1
 8005792:	4283      	cmp	r3, r0
 8005794:	6011      	str	r1, [r2, #0]
 8005796:	d1e0      	bne.n	800575a <_free_r+0x22>
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4401      	add	r1, r0
 800579e:	6011      	str	r1, [r2, #0]
 80057a0:	6053      	str	r3, [r2, #4]
 80057a2:	e7da      	b.n	800575a <_free_r+0x22>
 80057a4:	d902      	bls.n	80057ac <_free_r+0x74>
 80057a6:	230c      	movs	r3, #12
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	e7d6      	b.n	800575a <_free_r+0x22>
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	1821      	adds	r1, r4, r0
 80057b0:	428b      	cmp	r3, r1
 80057b2:	bf01      	itttt	eq
 80057b4:	6819      	ldreq	r1, [r3, #0]
 80057b6:	685b      	ldreq	r3, [r3, #4]
 80057b8:	1809      	addeq	r1, r1, r0
 80057ba:	6021      	streq	r1, [r4, #0]
 80057bc:	6063      	str	r3, [r4, #4]
 80057be:	6054      	str	r4, [r2, #4]
 80057c0:	e7cb      	b.n	800575a <_free_r+0x22>
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	20000158 	.word	0x20000158

080057c8 <sbrk_aligned>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4e0e      	ldr	r6, [pc, #56]	; (8005804 <sbrk_aligned+0x3c>)
 80057cc:	460c      	mov	r4, r1
 80057ce:	6831      	ldr	r1, [r6, #0]
 80057d0:	4605      	mov	r5, r0
 80057d2:	b911      	cbnz	r1, 80057da <sbrk_aligned+0x12>
 80057d4:	f000 f8bc 	bl	8005950 <_sbrk_r>
 80057d8:	6030      	str	r0, [r6, #0]
 80057da:	4621      	mov	r1, r4
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 f8b7 	bl	8005950 <_sbrk_r>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d00a      	beq.n	80057fc <sbrk_aligned+0x34>
 80057e6:	1cc4      	adds	r4, r0, #3
 80057e8:	f024 0403 	bic.w	r4, r4, #3
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d007      	beq.n	8005800 <sbrk_aligned+0x38>
 80057f0:	1a21      	subs	r1, r4, r0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 f8ac 	bl	8005950 <_sbrk_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d101      	bne.n	8005800 <sbrk_aligned+0x38>
 80057fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005800:	4620      	mov	r0, r4
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	2000015c 	.word	0x2000015c

08005808 <_malloc_r>:
 8005808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800580c:	1ccd      	adds	r5, r1, #3
 800580e:	f025 0503 	bic.w	r5, r5, #3
 8005812:	3508      	adds	r5, #8
 8005814:	2d0c      	cmp	r5, #12
 8005816:	bf38      	it	cc
 8005818:	250c      	movcc	r5, #12
 800581a:	2d00      	cmp	r5, #0
 800581c:	4607      	mov	r7, r0
 800581e:	db01      	blt.n	8005824 <_malloc_r+0x1c>
 8005820:	42a9      	cmp	r1, r5
 8005822:	d905      	bls.n	8005830 <_malloc_r+0x28>
 8005824:	230c      	movs	r3, #12
 8005826:	2600      	movs	r6, #0
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	4630      	mov	r0, r6
 800582c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005830:	4e2e      	ldr	r6, [pc, #184]	; (80058ec <_malloc_r+0xe4>)
 8005832:	f000 f89d 	bl	8005970 <__malloc_lock>
 8005836:	6833      	ldr	r3, [r6, #0]
 8005838:	461c      	mov	r4, r3
 800583a:	bb34      	cbnz	r4, 800588a <_malloc_r+0x82>
 800583c:	4629      	mov	r1, r5
 800583e:	4638      	mov	r0, r7
 8005840:	f7ff ffc2 	bl	80057c8 <sbrk_aligned>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	4604      	mov	r4, r0
 8005848:	d14d      	bne.n	80058e6 <_malloc_r+0xde>
 800584a:	6834      	ldr	r4, [r6, #0]
 800584c:	4626      	mov	r6, r4
 800584e:	2e00      	cmp	r6, #0
 8005850:	d140      	bne.n	80058d4 <_malloc_r+0xcc>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	4631      	mov	r1, r6
 8005856:	4638      	mov	r0, r7
 8005858:	eb04 0803 	add.w	r8, r4, r3
 800585c:	f000 f878 	bl	8005950 <_sbrk_r>
 8005860:	4580      	cmp	r8, r0
 8005862:	d13a      	bne.n	80058da <_malloc_r+0xd2>
 8005864:	6821      	ldr	r1, [r4, #0]
 8005866:	3503      	adds	r5, #3
 8005868:	1a6d      	subs	r5, r5, r1
 800586a:	f025 0503 	bic.w	r5, r5, #3
 800586e:	3508      	adds	r5, #8
 8005870:	2d0c      	cmp	r5, #12
 8005872:	bf38      	it	cc
 8005874:	250c      	movcc	r5, #12
 8005876:	4638      	mov	r0, r7
 8005878:	4629      	mov	r1, r5
 800587a:	f7ff ffa5 	bl	80057c8 <sbrk_aligned>
 800587e:	3001      	adds	r0, #1
 8005880:	d02b      	beq.n	80058da <_malloc_r+0xd2>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	442b      	add	r3, r5
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	e00e      	b.n	80058a8 <_malloc_r+0xa0>
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	1b52      	subs	r2, r2, r5
 800588e:	d41e      	bmi.n	80058ce <_malloc_r+0xc6>
 8005890:	2a0b      	cmp	r2, #11
 8005892:	d916      	bls.n	80058c2 <_malloc_r+0xba>
 8005894:	1961      	adds	r1, r4, r5
 8005896:	42a3      	cmp	r3, r4
 8005898:	6025      	str	r5, [r4, #0]
 800589a:	bf18      	it	ne
 800589c:	6059      	strne	r1, [r3, #4]
 800589e:	6863      	ldr	r3, [r4, #4]
 80058a0:	bf08      	it	eq
 80058a2:	6031      	streq	r1, [r6, #0]
 80058a4:	5162      	str	r2, [r4, r5]
 80058a6:	604b      	str	r3, [r1, #4]
 80058a8:	4638      	mov	r0, r7
 80058aa:	f104 060b 	add.w	r6, r4, #11
 80058ae:	f000 f865 	bl	800597c <__malloc_unlock>
 80058b2:	f026 0607 	bic.w	r6, r6, #7
 80058b6:	1d23      	adds	r3, r4, #4
 80058b8:	1af2      	subs	r2, r6, r3
 80058ba:	d0b6      	beq.n	800582a <_malloc_r+0x22>
 80058bc:	1b9b      	subs	r3, r3, r6
 80058be:	50a3      	str	r3, [r4, r2]
 80058c0:	e7b3      	b.n	800582a <_malloc_r+0x22>
 80058c2:	6862      	ldr	r2, [r4, #4]
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	bf0c      	ite	eq
 80058c8:	6032      	streq	r2, [r6, #0]
 80058ca:	605a      	strne	r2, [r3, #4]
 80058cc:	e7ec      	b.n	80058a8 <_malloc_r+0xa0>
 80058ce:	4623      	mov	r3, r4
 80058d0:	6864      	ldr	r4, [r4, #4]
 80058d2:	e7b2      	b.n	800583a <_malloc_r+0x32>
 80058d4:	4634      	mov	r4, r6
 80058d6:	6876      	ldr	r6, [r6, #4]
 80058d8:	e7b9      	b.n	800584e <_malloc_r+0x46>
 80058da:	230c      	movs	r3, #12
 80058dc:	4638      	mov	r0, r7
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	f000 f84c 	bl	800597c <__malloc_unlock>
 80058e4:	e7a1      	b.n	800582a <_malloc_r+0x22>
 80058e6:	6025      	str	r5, [r4, #0]
 80058e8:	e7de      	b.n	80058a8 <_malloc_r+0xa0>
 80058ea:	bf00      	nop
 80058ec:	20000158 	.word	0x20000158

080058f0 <_realloc_r>:
 80058f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f4:	4680      	mov	r8, r0
 80058f6:	4614      	mov	r4, r2
 80058f8:	460e      	mov	r6, r1
 80058fa:	b921      	cbnz	r1, 8005906 <_realloc_r+0x16>
 80058fc:	4611      	mov	r1, r2
 80058fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005902:	f7ff bf81 	b.w	8005808 <_malloc_r>
 8005906:	b92a      	cbnz	r2, 8005914 <_realloc_r+0x24>
 8005908:	f7ff ff16 	bl	8005738 <_free_r>
 800590c:	4625      	mov	r5, r4
 800590e:	4628      	mov	r0, r5
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005914:	f000 f838 	bl	8005988 <_malloc_usable_size_r>
 8005918:	4284      	cmp	r4, r0
 800591a:	4607      	mov	r7, r0
 800591c:	d802      	bhi.n	8005924 <_realloc_r+0x34>
 800591e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005922:	d812      	bhi.n	800594a <_realloc_r+0x5a>
 8005924:	4621      	mov	r1, r4
 8005926:	4640      	mov	r0, r8
 8005928:	f7ff ff6e 	bl	8005808 <_malloc_r>
 800592c:	4605      	mov	r5, r0
 800592e:	2800      	cmp	r0, #0
 8005930:	d0ed      	beq.n	800590e <_realloc_r+0x1e>
 8005932:	42bc      	cmp	r4, r7
 8005934:	4622      	mov	r2, r4
 8005936:	4631      	mov	r1, r6
 8005938:	bf28      	it	cs
 800593a:	463a      	movcs	r2, r7
 800593c:	f7ff fed4 	bl	80056e8 <memcpy>
 8005940:	4631      	mov	r1, r6
 8005942:	4640      	mov	r0, r8
 8005944:	f7ff fef8 	bl	8005738 <_free_r>
 8005948:	e7e1      	b.n	800590e <_realloc_r+0x1e>
 800594a:	4635      	mov	r5, r6
 800594c:	e7df      	b.n	800590e <_realloc_r+0x1e>
	...

08005950 <_sbrk_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	2300      	movs	r3, #0
 8005954:	4d05      	ldr	r5, [pc, #20]	; (800596c <_sbrk_r+0x1c>)
 8005956:	4604      	mov	r4, r0
 8005958:	4608      	mov	r0, r1
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	f7fc fa20 	bl	8001da0 <_sbrk>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_sbrk_r+0x1a>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_sbrk_r+0x1a>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000160 	.word	0x20000160

08005970 <__malloc_lock>:
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__malloc_lock+0x8>)
 8005972:	f000 b811 	b.w	8005998 <__retarget_lock_acquire_recursive>
 8005976:	bf00      	nop
 8005978:	20000164 	.word	0x20000164

0800597c <__malloc_unlock>:
 800597c:	4801      	ldr	r0, [pc, #4]	; (8005984 <__malloc_unlock+0x8>)
 800597e:	f000 b80c 	b.w	800599a <__retarget_lock_release_recursive>
 8005982:	bf00      	nop
 8005984:	20000164 	.word	0x20000164

08005988 <_malloc_usable_size_r>:
 8005988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800598c:	1f18      	subs	r0, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	bfbc      	itt	lt
 8005992:	580b      	ldrlt	r3, [r1, r0]
 8005994:	18c0      	addlt	r0, r0, r3
 8005996:	4770      	bx	lr

08005998 <__retarget_lock_acquire_recursive>:
 8005998:	4770      	bx	lr

0800599a <__retarget_lock_release_recursive>:
 800599a:	4770      	bx	lr

0800599c <_init>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	bf00      	nop
 80059a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a2:	bc08      	pop	{r3}
 80059a4:	469e      	mov	lr, r3
 80059a6:	4770      	bx	lr

080059a8 <_fini>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr
